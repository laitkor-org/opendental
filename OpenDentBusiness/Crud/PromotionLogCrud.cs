//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;

namespace OpenDentBusiness.Crud{
	public class PromotionLogCrud {
		///<summary>Gets one PromotionLog object from the database using the primary key.  Returns null if not found.</summary>
		public static PromotionLog SelectOne(long promotionLogNum) {
			string command="SELECT * FROM promotionlog "
				+"WHERE PromotionLogNum = "+POut.Long(promotionLogNum);
			List<PromotionLog> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one PromotionLog object from the database using a query.</summary>
		public static PromotionLog SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PromotionLog> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of PromotionLog objects from the database using a query.</summary>
		public static List<PromotionLog> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PromotionLog> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<PromotionLog> TableToList(DataTable table) {
			List<PromotionLog> retVal=new List<PromotionLog>();
			PromotionLog promotionLog;
			foreach(DataRow row in table.Rows) {
				promotionLog=new PromotionLog();
				promotionLog.PromotionLogNum= PIn.Long  (row["PromotionLogNum"].ToString());
				promotionLog.PromotionNum   = PIn.Long  (row["PromotionNum"].ToString());
				promotionLog.PatNum         = PIn.Long  (row["PatNum"].ToString());
				promotionLog.EmailMessageNum= PIn.Long  (row["EmailMessageNum"].ToString());
				promotionLog.EmailHostingFK = PIn.Long  (row["EmailHostingFK"].ToString());
				promotionLog.DateTimeSent   = PIn.DateT (row["DateTimeSent"].ToString());
				promotionLog.PromotionStatus= (OpenDentBusiness.PromotionLogStatus)PIn.Int(row["PromotionStatus"].ToString());
				retVal.Add(promotionLog);
			}
			return retVal;
		}

		///<summary>Converts a list of PromotionLog into a DataTable.</summary>
		public static DataTable ListToTable(List<PromotionLog> listPromotionLogs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="PromotionLog";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("PromotionLogNum");
			table.Columns.Add("PromotionNum");
			table.Columns.Add("PatNum");
			table.Columns.Add("EmailMessageNum");
			table.Columns.Add("EmailHostingFK");
			table.Columns.Add("DateTimeSent");
			table.Columns.Add("PromotionStatus");
			foreach(PromotionLog promotionLog in listPromotionLogs) {
				table.Rows.Add(new object[] {
					POut.Long  (promotionLog.PromotionLogNum),
					POut.Long  (promotionLog.PromotionNum),
					POut.Long  (promotionLog.PatNum),
					POut.Long  (promotionLog.EmailMessageNum),
					POut.Long  (promotionLog.EmailHostingFK),
					POut.DateT (promotionLog.DateTimeSent,false),
					POut.Int   ((int)promotionLog.PromotionStatus),
				});
			}
			return table;
		}

		///<summary>Inserts one PromotionLog into the database.  Returns the new priKey.</summary>
		public static long Insert(PromotionLog promotionLog) {
			return Insert(promotionLog,false);
		}

		///<summary>Inserts one PromotionLog into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(PromotionLog promotionLog,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				promotionLog.PromotionLogNum=ReplicationServers.GetKey("promotionlog","PromotionLogNum");
			}
			string command="INSERT INTO promotionlog (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="PromotionLogNum,";
			}
			command+="PromotionNum,PatNum,EmailMessageNum,EmailHostingFK,DateTimeSent,PromotionStatus) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(promotionLog.PromotionLogNum)+",";
			}
			command+=
				     POut.Long  (promotionLog.PromotionNum)+","
				+    POut.Long  (promotionLog.PatNum)+","
				+    POut.Long  (promotionLog.EmailMessageNum)+","
				+    POut.Long  (promotionLog.EmailHostingFK)+","
				+    POut.DateT (promotionLog.DateTimeSent)+","
				+    POut.Int   ((int)promotionLog.PromotionStatus)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				promotionLog.PromotionLogNum=Db.NonQ(command,true,"PromotionLogNum","promotionLog");
			}
			return promotionLog.PromotionLogNum;
		}

		///<summary>Inserts many PromotionLogs into the database.</summary>
		public static void InsertMany(List<PromotionLog> listPromotionLogs) {
			InsertMany(listPromotionLogs,false);
		}

		///<summary>Inserts many PromotionLogs into the database.  Provides option to use the existing priKey.</summary>
		public static void InsertMany(List<PromotionLog> listPromotionLogs,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				foreach(PromotionLog promotionLog in listPromotionLogs) {
					Insert(promotionLog);
				}
			}
			else {
				StringBuilder sbCommands=null;
				int index=0;
				int countRows=0;
				while(index < listPromotionLogs.Count) {
					PromotionLog promotionLog=listPromotionLogs[index];
					StringBuilder sbRow=new StringBuilder("(");
					bool hasComma=false;
					if(sbCommands==null) {
						sbCommands=new StringBuilder();
						sbCommands.Append("INSERT INTO promotionlog (");
						if(useExistingPK) {
							sbCommands.Append("PromotionLogNum,");
						}
						sbCommands.Append("PromotionNum,PatNum,EmailMessageNum,EmailHostingFK,DateTimeSent,PromotionStatus) VALUES ");
						countRows=0;
					}
					else {
						hasComma=true;
					}
					if(useExistingPK) {
						sbRow.Append(POut.Long(promotionLog.PromotionLogNum)); sbRow.Append(",");
					}
					sbRow.Append(POut.Long(promotionLog.PromotionNum)); sbRow.Append(",");
					sbRow.Append(POut.Long(promotionLog.PatNum)); sbRow.Append(",");
					sbRow.Append(POut.Long(promotionLog.EmailMessageNum)); sbRow.Append(",");
					sbRow.Append(POut.Long(promotionLog.EmailHostingFK)); sbRow.Append(",");
					sbRow.Append(POut.DateT(promotionLog.DateTimeSent)); sbRow.Append(",");
					sbRow.Append(POut.Int((int)promotionLog.PromotionStatus)); sbRow.Append(")");
					if(sbCommands.Length+sbRow.Length+1 > TableBase.MaxAllowedPacketCount && countRows > 0) {
						Db.NonQ(sbCommands.ToString());
						sbCommands=null;
					}
					else {
						if(hasComma) {
							sbCommands.Append(",");
						}
						sbCommands.Append(sbRow.ToString());
						countRows++;
						if(index==listPromotionLogs.Count-1) {
							Db.NonQ(sbCommands.ToString());
						}
						index++;
					}
				}
			}
		}

		///<summary>Inserts one PromotionLog into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PromotionLog promotionLog) {
			return InsertNoCache(promotionLog,false);
		}

		///<summary>Inserts one PromotionLog into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PromotionLog promotionLog,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO promotionlog (";
			if(!useExistingPK && isRandomKeys) {
				promotionLog.PromotionLogNum=ReplicationServers.GetKeyNoCache("promotionlog","PromotionLogNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="PromotionLogNum,";
			}
			command+="PromotionNum,PatNum,EmailMessageNum,EmailHostingFK,DateTimeSent,PromotionStatus) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(promotionLog.PromotionLogNum)+",";
			}
			command+=
				     POut.Long  (promotionLog.PromotionNum)+","
				+    POut.Long  (promotionLog.PatNum)+","
				+    POut.Long  (promotionLog.EmailMessageNum)+","
				+    POut.Long  (promotionLog.EmailHostingFK)+","
				+    POut.DateT (promotionLog.DateTimeSent)+","
				+    POut.Int   ((int)promotionLog.PromotionStatus)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				promotionLog.PromotionLogNum=Db.NonQ(command,true,"PromotionLogNum","promotionLog");
			}
			return promotionLog.PromotionLogNum;
		}

		///<summary>Updates one PromotionLog in the database.</summary>
		public static void Update(PromotionLog promotionLog) {
			string command="UPDATE promotionlog SET "
				+"PromotionNum   =  "+POut.Long  (promotionLog.PromotionNum)+", "
				+"PatNum         =  "+POut.Long  (promotionLog.PatNum)+", "
				+"EmailMessageNum=  "+POut.Long  (promotionLog.EmailMessageNum)+", "
				+"EmailHostingFK =  "+POut.Long  (promotionLog.EmailHostingFK)+", "
				+"DateTimeSent   =  "+POut.DateT (promotionLog.DateTimeSent)+", "
				+"PromotionStatus=  "+POut.Int   ((int)promotionLog.PromotionStatus)+" "
				+"WHERE PromotionLogNum = "+POut.Long(promotionLog.PromotionLogNum);
			Db.NonQ(command);
		}

		///<summary>Updates one PromotionLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(PromotionLog promotionLog,PromotionLog oldPromotionLog) {
			string command="";
			if(promotionLog.PromotionNum != oldPromotionLog.PromotionNum) {
				if(command!="") { command+=",";}
				command+="PromotionNum = "+POut.Long(promotionLog.PromotionNum)+"";
			}
			if(promotionLog.PatNum != oldPromotionLog.PatNum) {
				if(command!="") { command+=",";}
				command+="PatNum = "+POut.Long(promotionLog.PatNum)+"";
			}
			if(promotionLog.EmailMessageNum != oldPromotionLog.EmailMessageNum) {
				if(command!="") { command+=",";}
				command+="EmailMessageNum = "+POut.Long(promotionLog.EmailMessageNum)+"";
			}
			if(promotionLog.EmailHostingFK != oldPromotionLog.EmailHostingFK) {
				if(command!="") { command+=",";}
				command+="EmailHostingFK = "+POut.Long(promotionLog.EmailHostingFK)+"";
			}
			if(promotionLog.DateTimeSent != oldPromotionLog.DateTimeSent) {
				if(command!="") { command+=",";}
				command+="DateTimeSent = "+POut.DateT(promotionLog.DateTimeSent)+"";
			}
			if(promotionLog.PromotionStatus != oldPromotionLog.PromotionStatus) {
				if(command!="") { command+=",";}
				command+="PromotionStatus = "+POut.Int   ((int)promotionLog.PromotionStatus)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE promotionlog SET "+command
				+" WHERE PromotionLogNum = "+POut.Long(promotionLog.PromotionLogNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(PromotionLog,PromotionLog) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(PromotionLog promotionLog,PromotionLog oldPromotionLog) {
			if(promotionLog.PromotionNum != oldPromotionLog.PromotionNum) {
				return true;
			}
			if(promotionLog.PatNum != oldPromotionLog.PatNum) {
				return true;
			}
			if(promotionLog.EmailMessageNum != oldPromotionLog.EmailMessageNum) {
				return true;
			}
			if(promotionLog.EmailHostingFK != oldPromotionLog.EmailHostingFK) {
				return true;
			}
			if(promotionLog.DateTimeSent != oldPromotionLog.DateTimeSent) {
				return true;
			}
			if(promotionLog.PromotionStatus != oldPromotionLog.PromotionStatus) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one PromotionLog from the database.</summary>
		public static void Delete(long promotionLogNum) {
			string command="DELETE FROM promotionlog "
				+"WHERE PromotionLogNum = "+POut.Long(promotionLogNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many PromotionLogs from the database.</summary>
		public static void DeleteMany(List<long> listPromotionLogNums) {
			if(listPromotionLogNums==null || listPromotionLogNums.Count==0) {
				return;
			}
			string command="DELETE FROM promotionlog "
				+"WHERE PromotionLogNum IN("+string.Join(",",listPromotionLogNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}