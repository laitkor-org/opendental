//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;

namespace OpenDentBusiness.Crud{
	public class ReferralClinicLinkCrud {
		///<summary>Gets one ReferralClinicLink object from the database using the primary key.  Returns null if not found.</summary>
		public static ReferralClinicLink SelectOne(long referralClinicLinkNum) {
			string command="SELECT * FROM referralcliniclink "
				+"WHERE ReferralClinicLinkNum = "+POut.Long(referralClinicLinkNum);
			List<ReferralClinicLink> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ReferralClinicLink object from the database using a query.</summary>
		public static ReferralClinicLink SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ReferralClinicLink> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ReferralClinicLink objects from the database using a query.</summary>
		public static List<ReferralClinicLink> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ReferralClinicLink> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ReferralClinicLink> TableToList(DataTable table) {
			List<ReferralClinicLink> retVal=new List<ReferralClinicLink>();
			ReferralClinicLink referralClinicLink;
			foreach(DataRow row in table.Rows) {
				referralClinicLink=new ReferralClinicLink();
				referralClinicLink.ReferralClinicLinkNum= PIn.Long  (row["ReferralClinicLinkNum"].ToString());
				referralClinicLink.ReferralNum          = PIn.Long  (row["ReferralNum"].ToString());
				referralClinicLink.ClinicNum            = PIn.Long  (row["ClinicNum"].ToString());
				retVal.Add(referralClinicLink);
			}
			return retVal;
		}

		///<summary>Converts a list of ReferralClinicLink into a DataTable.</summary>
		public static DataTable ListToTable(List<ReferralClinicLink> listReferralClinicLinks,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ReferralClinicLink";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ReferralClinicLinkNum");
			table.Columns.Add("ReferralNum");
			table.Columns.Add("ClinicNum");
			foreach(ReferralClinicLink referralClinicLink in listReferralClinicLinks) {
				table.Rows.Add(new object[] {
					POut.Long  (referralClinicLink.ReferralClinicLinkNum),
					POut.Long  (referralClinicLink.ReferralNum),
					POut.Long  (referralClinicLink.ClinicNum),
				});
			}
			return table;
		}

		///<summary>Inserts one ReferralClinicLink into the database.  Returns the new priKey.</summary>
		public static long Insert(ReferralClinicLink referralClinicLink) {
			return Insert(referralClinicLink,false);
		}

		///<summary>Inserts one ReferralClinicLink into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ReferralClinicLink referralClinicLink,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				referralClinicLink.ReferralClinicLinkNum=ReplicationServers.GetKey("referralcliniclink","ReferralClinicLinkNum");
			}
			string command="INSERT INTO referralcliniclink (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ReferralClinicLinkNum,";
			}
			command+="ReferralNum,ClinicNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(referralClinicLink.ReferralClinicLinkNum)+",";
			}
			command+=
				     POut.Long  (referralClinicLink.ReferralNum)+","
				+    POut.Long  (referralClinicLink.ClinicNum)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				referralClinicLink.ReferralClinicLinkNum=Db.NonQ(command,true,"ReferralClinicLinkNum","referralClinicLink");
			}
			return referralClinicLink.ReferralClinicLinkNum;
		}

		///<summary>Inserts many ReferralClinicLinks into the database.</summary>
		public static void InsertMany(List<ReferralClinicLink> listReferralClinicLinks) {
			InsertMany(listReferralClinicLinks,false);
		}

		///<summary>Inserts many ReferralClinicLinks into the database.  Provides option to use the existing priKey.</summary>
		public static void InsertMany(List<ReferralClinicLink> listReferralClinicLinks,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				foreach(ReferralClinicLink referralClinicLink in listReferralClinicLinks) {
					Insert(referralClinicLink);
				}
			}
			else {
				StringBuilder sbCommands=null;
				int index=0;
				int countRows=0;
				while(index < listReferralClinicLinks.Count) {
					ReferralClinicLink referralClinicLink=listReferralClinicLinks[index];
					StringBuilder sbRow=new StringBuilder("(");
					bool hasComma=false;
					if(sbCommands==null) {
						sbCommands=new StringBuilder();
						sbCommands.Append("INSERT INTO referralcliniclink (");
						if(useExistingPK) {
							sbCommands.Append("ReferralClinicLinkNum,");
						}
						sbCommands.Append("ReferralNum,ClinicNum) VALUES ");
						countRows=0;
					}
					else {
						hasComma=true;
					}
					if(useExistingPK) {
						sbRow.Append(POut.Long(referralClinicLink.ReferralClinicLinkNum)); sbRow.Append(",");
					}
					sbRow.Append(POut.Long(referralClinicLink.ReferralNum)); sbRow.Append(",");
					sbRow.Append(POut.Long(referralClinicLink.ClinicNum)); sbRow.Append(")");
					if(sbCommands.Length+sbRow.Length+1 > TableBase.MaxAllowedPacketCount && countRows > 0) {
						Db.NonQ(sbCommands.ToString());
						sbCommands=null;
					}
					else {
						if(hasComma) {
							sbCommands.Append(",");
						}
						sbCommands.Append(sbRow.ToString());
						countRows++;
						if(index==listReferralClinicLinks.Count-1) {
							Db.NonQ(sbCommands.ToString());
						}
						index++;
					}
				}
			}
		}

		///<summary>Inserts one ReferralClinicLink into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ReferralClinicLink referralClinicLink) {
			return InsertNoCache(referralClinicLink,false);
		}

		///<summary>Inserts one ReferralClinicLink into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ReferralClinicLink referralClinicLink,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO referralcliniclink (";
			if(!useExistingPK && isRandomKeys) {
				referralClinicLink.ReferralClinicLinkNum=ReplicationServers.GetKeyNoCache("referralcliniclink","ReferralClinicLinkNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ReferralClinicLinkNum,";
			}
			command+="ReferralNum,ClinicNum) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(referralClinicLink.ReferralClinicLinkNum)+",";
			}
			command+=
				     POut.Long  (referralClinicLink.ReferralNum)+","
				+    POut.Long  (referralClinicLink.ClinicNum)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				referralClinicLink.ReferralClinicLinkNum=Db.NonQ(command,true,"ReferralClinicLinkNum","referralClinicLink");
			}
			return referralClinicLink.ReferralClinicLinkNum;
		}

		///<summary>Updates one ReferralClinicLink in the database.</summary>
		public static void Update(ReferralClinicLink referralClinicLink) {
			string command="UPDATE referralcliniclink SET "
				+"ReferralNum          =  "+POut.Long  (referralClinicLink.ReferralNum)+", "
				+"ClinicNum            =  "+POut.Long  (referralClinicLink.ClinicNum)+" "
				+"WHERE ReferralClinicLinkNum = "+POut.Long(referralClinicLink.ReferralClinicLinkNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ReferralClinicLink in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ReferralClinicLink referralClinicLink,ReferralClinicLink oldReferralClinicLink) {
			string command="";
			if(referralClinicLink.ReferralNum != oldReferralClinicLink.ReferralNum) {
				if(command!="") { command+=",";}
				command+="ReferralNum = "+POut.Long(referralClinicLink.ReferralNum)+"";
			}
			if(referralClinicLink.ClinicNum != oldReferralClinicLink.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(referralClinicLink.ClinicNum)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE referralcliniclink SET "+command
				+" WHERE ReferralClinicLinkNum = "+POut.Long(referralClinicLink.ReferralClinicLinkNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ReferralClinicLink,ReferralClinicLink) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ReferralClinicLink referralClinicLink,ReferralClinicLink oldReferralClinicLink) {
			if(referralClinicLink.ReferralNum != oldReferralClinicLink.ReferralNum) {
				return true;
			}
			if(referralClinicLink.ClinicNum != oldReferralClinicLink.ClinicNum) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ReferralClinicLink from the database.</summary>
		public static void Delete(long referralClinicLinkNum) {
			string command="DELETE FROM referralcliniclink "
				+"WHERE ReferralClinicLinkNum = "+POut.Long(referralClinicLinkNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ReferralClinicLinks from the database.</summary>
		public static void DeleteMany(List<long> listReferralClinicLinkNums) {
			if(listReferralClinicLinkNums==null || listReferralClinicLinkNums.Count==0) {
				return;
			}
			string command="DELETE FROM referralcliniclink "
				+"WHERE ReferralClinicLinkNum IN("+string.Join(",",listReferralClinicLinkNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}