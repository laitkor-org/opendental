//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class SessionTokenCrud {
		///<summary>Gets one SessionToken object from the database using the primary key.  Returns null if not found.</summary>
		public static SessionToken SelectOne(long sessionTokenNum) {
			string command="SELECT * FROM sessiontoken "
				+"WHERE SessionTokenNum = "+POut.Long(sessionTokenNum);
			List<SessionToken> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one SessionToken object from the database using a query.</summary>
		public static SessionToken SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SessionToken> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of SessionToken objects from the database using a query.</summary>
		public static List<SessionToken> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SessionToken> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<SessionToken> TableToList(DataTable table) {
			List<SessionToken> retVal=new List<SessionToken>();
			SessionToken sessionToken;
			foreach(DataRow row in table.Rows) {
				sessionToken=new SessionToken();
				sessionToken.SessionTokenNum = PIn.Long  (row["SessionTokenNum"].ToString());
				sessionToken.SessionTokenHash= PIn.String(row["SessionTokenHash"].ToString());
				sessionToken.Expiration      = PIn.DateT (row["Expiration"].ToString());
				sessionToken.TokenType       = (OpenDentBusiness.SessionTokenType)PIn.Int(row["TokenType"].ToString());
				sessionToken.FKey            = PIn.Long  (row["FKey"].ToString());
				retVal.Add(sessionToken);
			}
			return retVal;
		}

		///<summary>Converts a list of SessionToken into a DataTable.</summary>
		public static DataTable ListToTable(List<SessionToken> listSessionTokens,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="SessionToken";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("SessionTokenNum");
			table.Columns.Add("SessionTokenHash");
			table.Columns.Add("Expiration");
			table.Columns.Add("TokenType");
			table.Columns.Add("FKey");
			foreach(SessionToken sessionToken in listSessionTokens) {
				table.Rows.Add(new object[] {
					POut.Long  (sessionToken.SessionTokenNum),
					            sessionToken.SessionTokenHash,
					POut.DateT (sessionToken.Expiration,false),
					POut.Int   ((int)sessionToken.TokenType),
					POut.Long  (sessionToken.FKey),
				});
			}
			return table;
		}

		///<summary>Inserts one SessionToken into the database.  Returns the new priKey.</summary>
		public static long Insert(SessionToken sessionToken) {
			return Insert(sessionToken,false);
		}

		///<summary>Inserts one SessionToken into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(SessionToken sessionToken,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				sessionToken.SessionTokenNum=ReplicationServers.GetKey("sessiontoken","SessionTokenNum");
			}
			string command="INSERT INTO sessiontoken (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="SessionTokenNum,";
			}
			command+="SessionTokenHash,Expiration,TokenType,FKey) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(sessionToken.SessionTokenNum)+",";
			}
			command+=
				 "'"+POut.String(sessionToken.SessionTokenHash)+"',"
				+    POut.DateT (sessionToken.Expiration)+","
				+    POut.Int   ((int)sessionToken.TokenType)+","
				+    POut.Long  (sessionToken.FKey)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				sessionToken.SessionTokenNum=Db.NonQ(command,true,"SessionTokenNum","sessionToken");
			}
			return sessionToken.SessionTokenNum;
		}

		///<summary>Inserts one SessionToken into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(SessionToken sessionToken) {
			return InsertNoCache(sessionToken,false);
		}

		///<summary>Inserts one SessionToken into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(SessionToken sessionToken,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO sessiontoken (";
			if(!useExistingPK && isRandomKeys) {
				sessionToken.SessionTokenNum=ReplicationServers.GetKeyNoCache("sessiontoken","SessionTokenNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="SessionTokenNum,";
			}
			command+="SessionTokenHash,Expiration,TokenType,FKey) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(sessionToken.SessionTokenNum)+",";
			}
			command+=
				 "'"+POut.String(sessionToken.SessionTokenHash)+"',"
				+    POut.DateT (sessionToken.Expiration)+","
				+    POut.Int   ((int)sessionToken.TokenType)+","
				+    POut.Long  (sessionToken.FKey)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				sessionToken.SessionTokenNum=Db.NonQ(command,true,"SessionTokenNum","sessionToken");
			}
			return sessionToken.SessionTokenNum;
		}

		///<summary>Updates one SessionToken in the database.</summary>
		public static void Update(SessionToken sessionToken) {
			string command="UPDATE sessiontoken SET "
				+"SessionTokenHash= '"+POut.String(sessionToken.SessionTokenHash)+"', "
				+"Expiration      =  "+POut.DateT (sessionToken.Expiration)+", "
				+"TokenType       =  "+POut.Int   ((int)sessionToken.TokenType)+", "
				+"FKey            =  "+POut.Long  (sessionToken.FKey)+" "
				+"WHERE SessionTokenNum = "+POut.Long(sessionToken.SessionTokenNum);
			Db.NonQ(command);
		}

		///<summary>Updates one SessionToken in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(SessionToken sessionToken,SessionToken oldSessionToken) {
			string command="";
			if(sessionToken.SessionTokenHash != oldSessionToken.SessionTokenHash) {
				if(command!="") { command+=",";}
				command+="SessionTokenHash = '"+POut.String(sessionToken.SessionTokenHash)+"'";
			}
			if(sessionToken.Expiration != oldSessionToken.Expiration) {
				if(command!="") { command+=",";}
				command+="Expiration = "+POut.DateT(sessionToken.Expiration)+"";
			}
			if(sessionToken.TokenType != oldSessionToken.TokenType) {
				if(command!="") { command+=",";}
				command+="TokenType = "+POut.Int   ((int)sessionToken.TokenType)+"";
			}
			if(sessionToken.FKey != oldSessionToken.FKey) {
				if(command!="") { command+=",";}
				command+="FKey = "+POut.Long(sessionToken.FKey)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE sessiontoken SET "+command
				+" WHERE SessionTokenNum = "+POut.Long(sessionToken.SessionTokenNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(SessionToken,SessionToken) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(SessionToken sessionToken,SessionToken oldSessionToken) {
			if(sessionToken.SessionTokenHash != oldSessionToken.SessionTokenHash) {
				return true;
			}
			if(sessionToken.Expiration != oldSessionToken.Expiration) {
				return true;
			}
			if(sessionToken.TokenType != oldSessionToken.TokenType) {
				return true;
			}
			if(sessionToken.FKey != oldSessionToken.FKey) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one SessionToken from the database.</summary>
		public static void Delete(long sessionTokenNum) {
			string command="DELETE FROM sessiontoken "
				+"WHERE SessionTokenNum = "+POut.Long(sessionTokenNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many SessionTokens from the database.</summary>
		public static void DeleteMany(List<long> listSessionTokenNums) {
			if(listSessionTokenNums==null || listSessionTokenNums.Count==0) {
				return;
			}
			string command="DELETE FROM sessiontoken "
				+"WHERE SessionTokenNum IN("+string.Join(",",listSessionTokenNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}