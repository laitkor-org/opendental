//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ImagingDeviceCrud {
		///<summary>Gets one ImagingDevice object from the database using the primary key.  Returns null if not found.</summary>
		public static ImagingDevice SelectOne(long imagingDeviceNum) {
			string command="SELECT * FROM imagingdevice "
				+"WHERE ImagingDeviceNum = "+POut.Long(imagingDeviceNum);
			List<ImagingDevice> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ImagingDevice object from the database using a query.</summary>
		public static ImagingDevice SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ImagingDevice> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ImagingDevice objects from the database using a query.</summary>
		public static List<ImagingDevice> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ImagingDevice> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ImagingDevice> TableToList(DataTable table) {
			List<ImagingDevice> retVal=new List<ImagingDevice>();
			ImagingDevice imagingDevice;
			foreach(DataRow row in table.Rows) {
				imagingDevice=new ImagingDevice();
				imagingDevice.ImagingDeviceNum= PIn.Long  (row["ImagingDeviceNum"].ToString());
				imagingDevice.Description     = PIn.String(row["Description"].ToString());
				imagingDevice.ComputerName    = PIn.String(row["ComputerName"].ToString());
				imagingDevice.DeviceType      = (OpenDentBusiness.EnumImgDeviceType)PIn.Int(row["DeviceType"].ToString());
				imagingDevice.TwainName       = PIn.String(row["TwainName"].ToString());
				imagingDevice.ItemOrder       = PIn.Int   (row["ItemOrder"].ToString());
				imagingDevice.ShowTwainUI     = PIn.Bool  (row["ShowTwainUI"].ToString());
				retVal.Add(imagingDevice);
			}
			return retVal;
		}

		///<summary>Converts a list of ImagingDevice into a DataTable.</summary>
		public static DataTable ListToTable(List<ImagingDevice> listImagingDevices,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ImagingDevice";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ImagingDeviceNum");
			table.Columns.Add("Description");
			table.Columns.Add("ComputerName");
			table.Columns.Add("DeviceType");
			table.Columns.Add("TwainName");
			table.Columns.Add("ItemOrder");
			table.Columns.Add("ShowTwainUI");
			foreach(ImagingDevice imagingDevice in listImagingDevices) {
				table.Rows.Add(new object[] {
					POut.Long  (imagingDevice.ImagingDeviceNum),
					            imagingDevice.Description,
					            imagingDevice.ComputerName,
					POut.Int   ((int)imagingDevice.DeviceType),
					            imagingDevice.TwainName,
					POut.Int   (imagingDevice.ItemOrder),
					POut.Bool  (imagingDevice.ShowTwainUI),
				});
			}
			return table;
		}

		///<summary>Inserts one ImagingDevice into the database.  Returns the new priKey.</summary>
		public static long Insert(ImagingDevice imagingDevice) {
			return Insert(imagingDevice,false);
		}

		///<summary>Inserts one ImagingDevice into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ImagingDevice imagingDevice,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				imagingDevice.ImagingDeviceNum=ReplicationServers.GetKey("imagingdevice","ImagingDeviceNum");
			}
			string command="INSERT INTO imagingdevice (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ImagingDeviceNum,";
			}
			command+="Description,ComputerName,DeviceType,TwainName,ItemOrder,ShowTwainUI) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(imagingDevice.ImagingDeviceNum)+",";
			}
			command+=
				 "'"+POut.String(imagingDevice.Description)+"',"
				+"'"+POut.String(imagingDevice.ComputerName)+"',"
				+    POut.Int   ((int)imagingDevice.DeviceType)+","
				+"'"+POut.String(imagingDevice.TwainName)+"',"
				+    POut.Int   (imagingDevice.ItemOrder)+","
				+    POut.Bool  (imagingDevice.ShowTwainUI)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				imagingDevice.ImagingDeviceNum=Db.NonQ(command,true,"ImagingDeviceNum","imagingDevice");
			}
			return imagingDevice.ImagingDeviceNum;
		}

		///<summary>Inserts one ImagingDevice into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ImagingDevice imagingDevice) {
			return InsertNoCache(imagingDevice,false);
		}

		///<summary>Inserts one ImagingDevice into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ImagingDevice imagingDevice,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO imagingdevice (";
			if(!useExistingPK && isRandomKeys) {
				imagingDevice.ImagingDeviceNum=ReplicationServers.GetKeyNoCache("imagingdevice","ImagingDeviceNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ImagingDeviceNum,";
			}
			command+="Description,ComputerName,DeviceType,TwainName,ItemOrder,ShowTwainUI) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(imagingDevice.ImagingDeviceNum)+",";
			}
			command+=
				 "'"+POut.String(imagingDevice.Description)+"',"
				+"'"+POut.String(imagingDevice.ComputerName)+"',"
				+    POut.Int   ((int)imagingDevice.DeviceType)+","
				+"'"+POut.String(imagingDevice.TwainName)+"',"
				+    POut.Int   (imagingDevice.ItemOrder)+","
				+    POut.Bool  (imagingDevice.ShowTwainUI)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				imagingDevice.ImagingDeviceNum=Db.NonQ(command,true,"ImagingDeviceNum","imagingDevice");
			}
			return imagingDevice.ImagingDeviceNum;
		}

		///<summary>Updates one ImagingDevice in the database.</summary>
		public static void Update(ImagingDevice imagingDevice) {
			string command="UPDATE imagingdevice SET "
				+"Description     = '"+POut.String(imagingDevice.Description)+"', "
				+"ComputerName    = '"+POut.String(imagingDevice.ComputerName)+"', "
				+"DeviceType      =  "+POut.Int   ((int)imagingDevice.DeviceType)+", "
				+"TwainName       = '"+POut.String(imagingDevice.TwainName)+"', "
				+"ItemOrder       =  "+POut.Int   (imagingDevice.ItemOrder)+", "
				+"ShowTwainUI     =  "+POut.Bool  (imagingDevice.ShowTwainUI)+" "
				+"WHERE ImagingDeviceNum = "+POut.Long(imagingDevice.ImagingDeviceNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ImagingDevice in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ImagingDevice imagingDevice,ImagingDevice oldImagingDevice) {
			string command="";
			if(imagingDevice.Description != oldImagingDevice.Description) {
				if(command!="") { command+=",";}
				command+="Description = '"+POut.String(imagingDevice.Description)+"'";
			}
			if(imagingDevice.ComputerName != oldImagingDevice.ComputerName) {
				if(command!="") { command+=",";}
				command+="ComputerName = '"+POut.String(imagingDevice.ComputerName)+"'";
			}
			if(imagingDevice.DeviceType != oldImagingDevice.DeviceType) {
				if(command!="") { command+=",";}
				command+="DeviceType = "+POut.Int   ((int)imagingDevice.DeviceType)+"";
			}
			if(imagingDevice.TwainName != oldImagingDevice.TwainName) {
				if(command!="") { command+=",";}
				command+="TwainName = '"+POut.String(imagingDevice.TwainName)+"'";
			}
			if(imagingDevice.ItemOrder != oldImagingDevice.ItemOrder) {
				if(command!="") { command+=",";}
				command+="ItemOrder = "+POut.Int(imagingDevice.ItemOrder)+"";
			}
			if(imagingDevice.ShowTwainUI != oldImagingDevice.ShowTwainUI) {
				if(command!="") { command+=",";}
				command+="ShowTwainUI = "+POut.Bool(imagingDevice.ShowTwainUI)+"";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE imagingdevice SET "+command
				+" WHERE ImagingDeviceNum = "+POut.Long(imagingDevice.ImagingDeviceNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ImagingDevice,ImagingDevice) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ImagingDevice imagingDevice,ImagingDevice oldImagingDevice) {
			if(imagingDevice.Description != oldImagingDevice.Description) {
				return true;
			}
			if(imagingDevice.ComputerName != oldImagingDevice.ComputerName) {
				return true;
			}
			if(imagingDevice.DeviceType != oldImagingDevice.DeviceType) {
				return true;
			}
			if(imagingDevice.TwainName != oldImagingDevice.TwainName) {
				return true;
			}
			if(imagingDevice.ItemOrder != oldImagingDevice.ItemOrder) {
				return true;
			}
			if(imagingDevice.ShowTwainUI != oldImagingDevice.ShowTwainUI) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ImagingDevice from the database.</summary>
		public static void Delete(long imagingDeviceNum) {
			string command="DELETE FROM imagingdevice "
				+"WHERE ImagingDeviceNum = "+POut.Long(imagingDeviceNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ImagingDevices from the database.</summary>
		public static void DeleteMany(List<long> listImagingDeviceNums) {
			if(listImagingDeviceNums==null || listImagingDeviceNums.Count==0) {
				return;
			}
			string command="DELETE FROM imagingdevice "
				+"WHERE ImagingDeviceNum IN("+string.Join(",",listImagingDeviceNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}