//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class DiscountPlanSubCrud {
		///<summary>Gets one DiscountPlanSub object from the database using the primary key.  Returns null if not found.</summary>
		public static DiscountPlanSub SelectOne(long discountSubNum) {
			string command="SELECT * FROM discountplansub "
				+"WHERE DiscountSubNum = "+POut.Long(discountSubNum);
			List<DiscountPlanSub> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one DiscountPlanSub object from the database using a query.</summary>
		public static DiscountPlanSub SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<DiscountPlanSub> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of DiscountPlanSub objects from the database using a query.</summary>
		public static List<DiscountPlanSub> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<DiscountPlanSub> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<DiscountPlanSub> TableToList(DataTable table) {
			List<DiscountPlanSub> retVal=new List<DiscountPlanSub>();
			DiscountPlanSub discountPlanSub;
			foreach(DataRow row in table.Rows) {
				discountPlanSub=new DiscountPlanSub();
				discountPlanSub.DiscountSubNum = PIn.Long  (row["DiscountSubNum"].ToString());
				discountPlanSub.DiscountPlanNum= PIn.Long  (row["DiscountPlanNum"].ToString());
				discountPlanSub.PatNum         = PIn.Long  (row["PatNum"].ToString());
				discountPlanSub.DateEffective  = PIn.Date  (row["DateEffective"].ToString());
				discountPlanSub.DateTerm       = PIn.Date  (row["DateTerm"].ToString());
				discountPlanSub.SubNote        = PIn.String(row["SubNote"].ToString());
				retVal.Add(discountPlanSub);
			}
			return retVal;
		}

		///<summary>Converts a list of DiscountPlanSub into a DataTable.</summary>
		public static DataTable ListToTable(List<DiscountPlanSub> listDiscountPlanSubs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="DiscountPlanSub";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("DiscountSubNum");
			table.Columns.Add("DiscountPlanNum");
			table.Columns.Add("PatNum");
			table.Columns.Add("DateEffective");
			table.Columns.Add("DateTerm");
			table.Columns.Add("SubNote");
			foreach(DiscountPlanSub discountPlanSub in listDiscountPlanSubs) {
				table.Rows.Add(new object[] {
					POut.Long  (discountPlanSub.DiscountSubNum),
					POut.Long  (discountPlanSub.DiscountPlanNum),
					POut.Long  (discountPlanSub.PatNum),
					POut.DateT (discountPlanSub.DateEffective,false),
					POut.DateT (discountPlanSub.DateTerm,false),
					            discountPlanSub.SubNote,
				});
			}
			return table;
		}

		///<summary>Inserts one DiscountPlanSub into the database.  Returns the new priKey.</summary>
		public static long Insert(DiscountPlanSub discountPlanSub) {
			return Insert(discountPlanSub,false);
		}

		///<summary>Inserts one DiscountPlanSub into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(DiscountPlanSub discountPlanSub,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				discountPlanSub.DiscountSubNum=ReplicationServers.GetKey("discountplansub","DiscountSubNum");
			}
			string command="INSERT INTO discountplansub (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="DiscountSubNum,";
			}
			command+="DiscountPlanNum,PatNum,DateEffective,DateTerm,SubNote) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(discountPlanSub.DiscountSubNum)+",";
			}
			command+=
				     POut.Long  (discountPlanSub.DiscountPlanNum)+","
				+    POut.Long  (discountPlanSub.PatNum)+","
				+    POut.Date  (discountPlanSub.DateEffective)+","
				+    POut.Date  (discountPlanSub.DateTerm)+","
				+    DbHelper.ParamChar+"paramSubNote)";
			if(discountPlanSub.SubNote==null) {
				discountPlanSub.SubNote="";
			}
			OdSqlParameter paramSubNote=new OdSqlParameter("paramSubNote",OdDbType.Text,POut.StringParam(discountPlanSub.SubNote));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramSubNote);
			}
			else {
				discountPlanSub.DiscountSubNum=Db.NonQ(command,true,"DiscountSubNum","discountPlanSub",paramSubNote);
			}
			return discountPlanSub.DiscountSubNum;
		}

		///<summary>Inserts one DiscountPlanSub into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(DiscountPlanSub discountPlanSub) {
			return InsertNoCache(discountPlanSub,false);
		}

		///<summary>Inserts one DiscountPlanSub into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(DiscountPlanSub discountPlanSub,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO discountplansub (";
			if(!useExistingPK && isRandomKeys) {
				discountPlanSub.DiscountSubNum=ReplicationServers.GetKeyNoCache("discountplansub","DiscountSubNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="DiscountSubNum,";
			}
			command+="DiscountPlanNum,PatNum,DateEffective,DateTerm,SubNote) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(discountPlanSub.DiscountSubNum)+",";
			}
			command+=
				     POut.Long  (discountPlanSub.DiscountPlanNum)+","
				+    POut.Long  (discountPlanSub.PatNum)+","
				+    POut.Date  (discountPlanSub.DateEffective)+","
				+    POut.Date  (discountPlanSub.DateTerm)+","
				+    DbHelper.ParamChar+"paramSubNote)";
			if(discountPlanSub.SubNote==null) {
				discountPlanSub.SubNote="";
			}
			OdSqlParameter paramSubNote=new OdSqlParameter("paramSubNote",OdDbType.Text,POut.StringParam(discountPlanSub.SubNote));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramSubNote);
			}
			else {
				discountPlanSub.DiscountSubNum=Db.NonQ(command,true,"DiscountSubNum","discountPlanSub",paramSubNote);
			}
			return discountPlanSub.DiscountSubNum;
		}

		///<summary>Updates one DiscountPlanSub in the database.</summary>
		public static void Update(DiscountPlanSub discountPlanSub) {
			string command="UPDATE discountplansub SET "
				+"DiscountPlanNum=  "+POut.Long  (discountPlanSub.DiscountPlanNum)+", "
				+"PatNum         =  "+POut.Long  (discountPlanSub.PatNum)+", "
				+"DateEffective  =  "+POut.Date  (discountPlanSub.DateEffective)+", "
				+"DateTerm       =  "+POut.Date  (discountPlanSub.DateTerm)+", "
				+"SubNote        =  "+DbHelper.ParamChar+"paramSubNote "
				+"WHERE DiscountSubNum = "+POut.Long(discountPlanSub.DiscountSubNum);
			if(discountPlanSub.SubNote==null) {
				discountPlanSub.SubNote="";
			}
			OdSqlParameter paramSubNote=new OdSqlParameter("paramSubNote",OdDbType.Text,POut.StringParam(discountPlanSub.SubNote));
			Db.NonQ(command,paramSubNote);
		}

		///<summary>Updates one DiscountPlanSub in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(DiscountPlanSub discountPlanSub,DiscountPlanSub oldDiscountPlanSub) {
			string command="";
			if(discountPlanSub.DiscountPlanNum != oldDiscountPlanSub.DiscountPlanNum) {
				if(command!="") { command+=",";}
				command+="DiscountPlanNum = "+POut.Long(discountPlanSub.DiscountPlanNum)+"";
			}
			if(discountPlanSub.PatNum != oldDiscountPlanSub.PatNum) {
				if(command!="") { command+=",";}
				command+="PatNum = "+POut.Long(discountPlanSub.PatNum)+"";
			}
			if(discountPlanSub.DateEffective.Date != oldDiscountPlanSub.DateEffective.Date) {
				if(command!="") { command+=",";}
				command+="DateEffective = "+POut.Date(discountPlanSub.DateEffective)+"";
			}
			if(discountPlanSub.DateTerm.Date != oldDiscountPlanSub.DateTerm.Date) {
				if(command!="") { command+=",";}
				command+="DateTerm = "+POut.Date(discountPlanSub.DateTerm)+"";
			}
			if(discountPlanSub.SubNote != oldDiscountPlanSub.SubNote) {
				if(command!="") { command+=",";}
				command+="SubNote = "+DbHelper.ParamChar+"paramSubNote";
			}
			if(command=="") {
				return false;
			}
			if(discountPlanSub.SubNote==null) {
				discountPlanSub.SubNote="";
			}
			OdSqlParameter paramSubNote=new OdSqlParameter("paramSubNote",OdDbType.Text,POut.StringParam(discountPlanSub.SubNote));
			command="UPDATE discountplansub SET "+command
				+" WHERE DiscountSubNum = "+POut.Long(discountPlanSub.DiscountSubNum);
			Db.NonQ(command,paramSubNote);
			return true;
		}

		///<summary>Returns true if Update(DiscountPlanSub,DiscountPlanSub) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(DiscountPlanSub discountPlanSub,DiscountPlanSub oldDiscountPlanSub) {
			if(discountPlanSub.DiscountPlanNum != oldDiscountPlanSub.DiscountPlanNum) {
				return true;
			}
			if(discountPlanSub.PatNum != oldDiscountPlanSub.PatNum) {
				return true;
			}
			if(discountPlanSub.DateEffective.Date != oldDiscountPlanSub.DateEffective.Date) {
				return true;
			}
			if(discountPlanSub.DateTerm.Date != oldDiscountPlanSub.DateTerm.Date) {
				return true;
			}
			if(discountPlanSub.SubNote != oldDiscountPlanSub.SubNote) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one DiscountPlanSub from the database.</summary>
		public static void Delete(long discountSubNum) {
			string command="DELETE FROM discountplansub "
				+"WHERE DiscountSubNum = "+POut.Long(discountSubNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many DiscountPlanSubs from the database.</summary>
		public static void DeleteMany(List<long> listDiscountSubNums) {
			if(listDiscountSubNums==null || listDiscountSubNums.Count==0) {
				return;
			}
			string command="DELETE FROM discountplansub "
				+"WHERE DiscountSubNum IN("+string.Join(",",listDiscountSubNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}