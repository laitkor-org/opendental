//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;

namespace OpenDentBusiness.Crud{
	public class EmailSecureAttachCrud {
		///<summary>Gets one EmailSecureAttach object from the database using the primary key.  Returns null if not found.</summary>
		public static EmailSecureAttach SelectOne(long emailSecureAttachNum) {
			string command="SELECT * FROM emailsecureattach "
				+"WHERE EmailSecureAttachNum = "+POut.Long(emailSecureAttachNum);
			List<EmailSecureAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EmailSecureAttach object from the database using a query.</summary>
		public static EmailSecureAttach SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EmailSecureAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EmailSecureAttach objects from the database using a query.</summary>
		public static List<EmailSecureAttach> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EmailSecureAttach> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<EmailSecureAttach> TableToList(DataTable table) {
			List<EmailSecureAttach> retVal=new List<EmailSecureAttach>();
			EmailSecureAttach emailSecureAttach;
			foreach(DataRow row in table.Rows) {
				emailSecureAttach=new EmailSecureAttach();
				emailSecureAttach.EmailSecureAttachNum= PIn.Long  (row["EmailSecureAttachNum"].ToString());
				emailSecureAttach.ClinicNum           = PIn.Long  (row["ClinicNum"].ToString());
				emailSecureAttach.EmailAttachNum      = PIn.Long  (row["EmailAttachNum"].ToString());
				emailSecureAttach.EmailSecureNum      = PIn.Long  (row["EmailSecureNum"].ToString());
				emailSecureAttach.AttachmentGuid      = PIn.String(row["AttachmentGuid"].ToString());
				emailSecureAttach.DisplayedFileName   = PIn.String(row["DisplayedFileName"].ToString());
				emailSecureAttach.Extension           = PIn.String(row["Extension"].ToString());
				emailSecureAttach.DateTEntry          = PIn.DateT (row["DateTEntry"].ToString());
				emailSecureAttach.SecDateTEdit        = PIn.DateT (row["SecDateTEdit"].ToString());
				retVal.Add(emailSecureAttach);
			}
			return retVal;
		}

		///<summary>Converts a list of EmailSecureAttach into a DataTable.</summary>
		public static DataTable ListToTable(List<EmailSecureAttach> listEmailSecureAttachs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="EmailSecureAttach";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("EmailSecureAttachNum");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("EmailAttachNum");
			table.Columns.Add("EmailSecureNum");
			table.Columns.Add("AttachmentGuid");
			table.Columns.Add("DisplayedFileName");
			table.Columns.Add("Extension");
			table.Columns.Add("DateTEntry");
			table.Columns.Add("SecDateTEdit");
			foreach(EmailSecureAttach emailSecureAttach in listEmailSecureAttachs) {
				table.Rows.Add(new object[] {
					POut.Long  (emailSecureAttach.EmailSecureAttachNum),
					POut.Long  (emailSecureAttach.ClinicNum),
					POut.Long  (emailSecureAttach.EmailAttachNum),
					POut.Long  (emailSecureAttach.EmailSecureNum),
					            emailSecureAttach.AttachmentGuid,
					            emailSecureAttach.DisplayedFileName,
					            emailSecureAttach.Extension,
					POut.DateT (emailSecureAttach.DateTEntry,false),
					POut.DateT (emailSecureAttach.SecDateTEdit,false),
				});
			}
			return table;
		}

		///<summary>Inserts one EmailSecureAttach into the database.  Returns the new priKey.</summary>
		public static long Insert(EmailSecureAttach emailSecureAttach) {
			return Insert(emailSecureAttach,false);
		}

		///<summary>Inserts one EmailSecureAttach into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(EmailSecureAttach emailSecureAttach,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				emailSecureAttach.EmailSecureAttachNum=ReplicationServers.GetKey("emailsecureattach","EmailSecureAttachNum");
			}
			string command="INSERT INTO emailsecureattach (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EmailSecureAttachNum,";
			}
			command+="ClinicNum,EmailAttachNum,EmailSecureNum,AttachmentGuid,DisplayedFileName,Extension,DateTEntry) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(emailSecureAttach.EmailSecureAttachNum)+",";
			}
			command+=
				     POut.Long  (emailSecureAttach.ClinicNum)+","
				+    POut.Long  (emailSecureAttach.EmailAttachNum)+","
				+    POut.Long  (emailSecureAttach.EmailSecureNum)+","
				+"'"+POut.String(emailSecureAttach.AttachmentGuid)+"',"
				+"'"+POut.String(emailSecureAttach.DisplayedFileName)+"',"
				+"'"+POut.String(emailSecureAttach.Extension)+"',"
				+    DbHelper.Now()+")";
				//SecDateTEdit can only be set by MySQL
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				emailSecureAttach.EmailSecureAttachNum=Db.NonQ(command,true,"EmailSecureAttachNum","emailSecureAttach");
			}
			return emailSecureAttach.EmailSecureAttachNum;
		}

		///<summary>Inserts many EmailSecureAttachs into the database.</summary>
		public static void InsertMany(List<EmailSecureAttach> listEmailSecureAttachs) {
			InsertMany(listEmailSecureAttachs,false);
		}

		///<summary>Inserts many EmailSecureAttachs into the database.  Provides option to use the existing priKey.</summary>
		public static void InsertMany(List<EmailSecureAttach> listEmailSecureAttachs,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				foreach(EmailSecureAttach emailSecureAttach in listEmailSecureAttachs) {
					Insert(emailSecureAttach);
				}
			}
			else {
				StringBuilder sbCommands=null;
				int index=0;
				int countRows=0;
				while(index < listEmailSecureAttachs.Count) {
					EmailSecureAttach emailSecureAttach=listEmailSecureAttachs[index];
					StringBuilder sbRow=new StringBuilder("(");
					bool hasComma=false;
					if(sbCommands==null) {
						sbCommands=new StringBuilder();
						sbCommands.Append("INSERT INTO emailsecureattach (");
						if(useExistingPK) {
							sbCommands.Append("EmailSecureAttachNum,");
						}
						sbCommands.Append("ClinicNum,EmailAttachNum,EmailSecureNum,AttachmentGuid,DisplayedFileName,Extension,DateTEntry) VALUES ");
						countRows=0;
					}
					else {
						hasComma=true;
					}
					if(useExistingPK) {
						sbRow.Append(POut.Long(emailSecureAttach.EmailSecureAttachNum)); sbRow.Append(",");
					}
					sbRow.Append(POut.Long(emailSecureAttach.ClinicNum)); sbRow.Append(",");
					sbRow.Append(POut.Long(emailSecureAttach.EmailAttachNum)); sbRow.Append(",");
					sbRow.Append(POut.Long(emailSecureAttach.EmailSecureNum)); sbRow.Append(",");
					sbRow.Append("'"+POut.String(emailSecureAttach.AttachmentGuid)+"'"); sbRow.Append(",");
					sbRow.Append("'"+POut.String(emailSecureAttach.DisplayedFileName)+"'"); sbRow.Append(",");
					sbRow.Append("'"+POut.String(emailSecureAttach.Extension)+"'"); sbRow.Append(",");
					sbRow.Append(DbHelper.Now()); sbRow.Append(")");
					//SecDateTEdit can only be set by MySQL
					if(sbCommands.Length+sbRow.Length+1 > TableBase.MaxAllowedPacketCount && countRows > 0) {
						Db.NonQ(sbCommands.ToString());
						sbCommands=null;
					}
					else {
						if(hasComma) {
							sbCommands.Append(",");
						}
						sbCommands.Append(sbRow.ToString());
						countRows++;
						if(index==listEmailSecureAttachs.Count-1) {
							Db.NonQ(sbCommands.ToString());
						}
						index++;
					}
				}
			}
		}

		///<summary>Inserts one EmailSecureAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EmailSecureAttach emailSecureAttach) {
			return InsertNoCache(emailSecureAttach,false);
		}

		///<summary>Inserts one EmailSecureAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EmailSecureAttach emailSecureAttach,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO emailsecureattach (";
			if(!useExistingPK && isRandomKeys) {
				emailSecureAttach.EmailSecureAttachNum=ReplicationServers.GetKeyNoCache("emailsecureattach","EmailSecureAttachNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="EmailSecureAttachNum,";
			}
			command+="ClinicNum,EmailAttachNum,EmailSecureNum,AttachmentGuid,DisplayedFileName,Extension,DateTEntry) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(emailSecureAttach.EmailSecureAttachNum)+",";
			}
			command+=
				     POut.Long  (emailSecureAttach.ClinicNum)+","
				+    POut.Long  (emailSecureAttach.EmailAttachNum)+","
				+    POut.Long  (emailSecureAttach.EmailSecureNum)+","
				+"'"+POut.String(emailSecureAttach.AttachmentGuid)+"',"
				+"'"+POut.String(emailSecureAttach.DisplayedFileName)+"',"
				+"'"+POut.String(emailSecureAttach.Extension)+"',"
				+    DbHelper.Now()+")";
				//SecDateTEdit can only be set by MySQL
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				emailSecureAttach.EmailSecureAttachNum=Db.NonQ(command,true,"EmailSecureAttachNum","emailSecureAttach");
			}
			return emailSecureAttach.EmailSecureAttachNum;
		}

		///<summary>Updates one EmailSecureAttach in the database.</summary>
		public static void Update(EmailSecureAttach emailSecureAttach) {
			string command="UPDATE emailsecureattach SET "
				+"ClinicNum           =  "+POut.Long  (emailSecureAttach.ClinicNum)+", "
				+"EmailAttachNum      =  "+POut.Long  (emailSecureAttach.EmailAttachNum)+", "
				+"EmailSecureNum      =  "+POut.Long  (emailSecureAttach.EmailSecureNum)+", "
				+"AttachmentGuid      = '"+POut.String(emailSecureAttach.AttachmentGuid)+"', "
				+"DisplayedFileName   = '"+POut.String(emailSecureAttach.DisplayedFileName)+"', "
				+"Extension           = '"+POut.String(emailSecureAttach.Extension)+"' "
				//DateTEntry not allowed to change
				//SecDateTEdit can only be set by MySQL
				+"WHERE EmailSecureAttachNum = "+POut.Long(emailSecureAttach.EmailSecureAttachNum);
			Db.NonQ(command);
		}

		///<summary>Updates one EmailSecureAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(EmailSecureAttach emailSecureAttach,EmailSecureAttach oldEmailSecureAttach) {
			string command="";
			if(emailSecureAttach.ClinicNum != oldEmailSecureAttach.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(emailSecureAttach.ClinicNum)+"";
			}
			if(emailSecureAttach.EmailAttachNum != oldEmailSecureAttach.EmailAttachNum) {
				if(command!="") { command+=",";}
				command+="EmailAttachNum = "+POut.Long(emailSecureAttach.EmailAttachNum)+"";
			}
			if(emailSecureAttach.EmailSecureNum != oldEmailSecureAttach.EmailSecureNum) {
				if(command!="") { command+=",";}
				command+="EmailSecureNum = "+POut.Long(emailSecureAttach.EmailSecureNum)+"";
			}
			if(emailSecureAttach.AttachmentGuid != oldEmailSecureAttach.AttachmentGuid) {
				if(command!="") { command+=",";}
				command+="AttachmentGuid = '"+POut.String(emailSecureAttach.AttachmentGuid)+"'";
			}
			if(emailSecureAttach.DisplayedFileName != oldEmailSecureAttach.DisplayedFileName) {
				if(command!="") { command+=",";}
				command+="DisplayedFileName = '"+POut.String(emailSecureAttach.DisplayedFileName)+"'";
			}
			if(emailSecureAttach.Extension != oldEmailSecureAttach.Extension) {
				if(command!="") { command+=",";}
				command+="Extension = '"+POut.String(emailSecureAttach.Extension)+"'";
			}
			//DateTEntry not allowed to change
			//SecDateTEdit can only be set by MySQL
			if(command=="") {
				return false;
			}
			command="UPDATE emailsecureattach SET "+command
				+" WHERE EmailSecureAttachNum = "+POut.Long(emailSecureAttach.EmailSecureAttachNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(EmailSecureAttach,EmailSecureAttach) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(EmailSecureAttach emailSecureAttach,EmailSecureAttach oldEmailSecureAttach) {
			if(emailSecureAttach.ClinicNum != oldEmailSecureAttach.ClinicNum) {
				return true;
			}
			if(emailSecureAttach.EmailAttachNum != oldEmailSecureAttach.EmailAttachNum) {
				return true;
			}
			if(emailSecureAttach.EmailSecureNum != oldEmailSecureAttach.EmailSecureNum) {
				return true;
			}
			if(emailSecureAttach.AttachmentGuid != oldEmailSecureAttach.AttachmentGuid) {
				return true;
			}
			if(emailSecureAttach.DisplayedFileName != oldEmailSecureAttach.DisplayedFileName) {
				return true;
			}
			if(emailSecureAttach.Extension != oldEmailSecureAttach.Extension) {
				return true;
			}
			//DateTEntry not allowed to change
			//SecDateTEdit can only be set by MySQL
			return false;
		}

		///<summary>Deletes one EmailSecureAttach from the database.</summary>
		public static void Delete(long emailSecureAttachNum) {
			string command="DELETE FROM emailsecureattach "
				+"WHERE EmailSecureAttachNum = "+POut.Long(emailSecureAttachNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many EmailSecureAttachs from the database.</summary>
		public static void DeleteMany(List<long> listEmailSecureAttachNums) {
			if(listEmailSecureAttachNums==null || listEmailSecureAttachNums.Count==0) {
				return;
			}
			string command="DELETE FROM emailsecureattach "
				+"WHERE EmailSecureAttachNum IN("+string.Join(",",listEmailSecureAttachNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}