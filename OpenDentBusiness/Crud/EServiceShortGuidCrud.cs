//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;

namespace OpenDentBusiness.Crud{
	public class EServiceShortGuidCrud {
		///<summary>Gets one EServiceShortGuid object from the database using the primary key.  Returns null if not found.</summary>
		public static EServiceShortGuid SelectOne(long eServiceShortGuidNum) {
			string command="SELECT * FROM eserviceshortguid "
				+"WHERE EServiceShortGuidNum = "+POut.Long(eServiceShortGuidNum);
			List<EServiceShortGuid> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EServiceShortGuid object from the database using a query.</summary>
		public static EServiceShortGuid SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EServiceShortGuid> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EServiceShortGuid objects from the database using a query.</summary>
		public static List<EServiceShortGuid> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EServiceShortGuid> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<EServiceShortGuid> TableToList(DataTable table) {
			List<EServiceShortGuid> retVal=new List<EServiceShortGuid>();
			EServiceShortGuid eServiceShortGuid;
			foreach(DataRow row in table.Rows) {
				eServiceShortGuid=new EServiceShortGuid();
				eServiceShortGuid.EServiceShortGuidNum= PIn.Long  (row["EServiceShortGuidNum"].ToString());
				string eServiceCode=row["EServiceCode"].ToString();
				if(eServiceCode=="") {
					eServiceShortGuid.EServiceCode      =(OpenDentBusiness.eServiceCode)0;
				}
				else try{
					eServiceShortGuid.EServiceCode      =(OpenDentBusiness.eServiceCode)Enum.Parse(typeof(OpenDentBusiness.eServiceCode),eServiceCode);
				}
				catch{
					eServiceShortGuid.EServiceCode      =(OpenDentBusiness.eServiceCode)0;
				}
				eServiceShortGuid.ShortGuid           = PIn.String(row["ShortGuid"].ToString());
				eServiceShortGuid.ShortURL            = PIn.String(row["ShortURL"].ToString());
				eServiceShortGuid.FKey                = PIn.Long  (row["FKey"].ToString());
				string fKeyType=row["FKeyType"].ToString();
				if(fKeyType=="") {
					eServiceShortGuid.FKeyType          =(OpenDentBusiness.EServiceShortGuidKeyType)0;
				}
				else try{
					eServiceShortGuid.FKeyType          =(OpenDentBusiness.EServiceShortGuidKeyType)Enum.Parse(typeof(OpenDentBusiness.EServiceShortGuidKeyType),fKeyType);
				}
				catch{
					eServiceShortGuid.FKeyType          =(OpenDentBusiness.EServiceShortGuidKeyType)0;
				}
				eServiceShortGuid.DateTimeExpiration  = PIn.DateT (row["DateTimeExpiration"].ToString());
				eServiceShortGuid.DateTEntry          = PIn.DateT (row["DateTEntry"].ToString());
				retVal.Add(eServiceShortGuid);
			}
			return retVal;
		}

		///<summary>Converts a list of EServiceShortGuid into a DataTable.</summary>
		public static DataTable ListToTable(List<EServiceShortGuid> listEServiceShortGuids,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="EServiceShortGuid";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("EServiceShortGuidNum");
			table.Columns.Add("EServiceCode");
			table.Columns.Add("ShortGuid");
			table.Columns.Add("ShortURL");
			table.Columns.Add("FKey");
			table.Columns.Add("FKeyType");
			table.Columns.Add("DateTimeExpiration");
			table.Columns.Add("DateTEntry");
			foreach(EServiceShortGuid eServiceShortGuid in listEServiceShortGuids) {
				table.Rows.Add(new object[] {
					POut.Long  (eServiceShortGuid.EServiceShortGuidNum),
					POut.Int   ((int)eServiceShortGuid.EServiceCode),
					            eServiceShortGuid.ShortGuid,
					            eServiceShortGuid.ShortURL,
					POut.Long  (eServiceShortGuid.FKey),
					POut.Int   ((int)eServiceShortGuid.FKeyType),
					POut.DateT (eServiceShortGuid.DateTimeExpiration,false),
					POut.DateT (eServiceShortGuid.DateTEntry,false),
				});
			}
			return table;
		}

		///<summary>Inserts one EServiceShortGuid into the database.  Returns the new priKey.</summary>
		public static long Insert(EServiceShortGuid eServiceShortGuid) {
			return Insert(eServiceShortGuid,false);
		}

		///<summary>Inserts one EServiceShortGuid into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(EServiceShortGuid eServiceShortGuid,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				eServiceShortGuid.EServiceShortGuidNum=ReplicationServers.GetKey("eserviceshortguid","EServiceShortGuidNum");
			}
			string command="INSERT INTO eserviceshortguid (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EServiceShortGuidNum,";
			}
			command+="EServiceCode,ShortGuid,ShortURL,FKey,FKeyType,DateTimeExpiration,DateTEntry) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(eServiceShortGuid.EServiceShortGuidNum)+",";
			}
			command+=
				 "'"+POut.String(eServiceShortGuid.EServiceCode.ToString())+"',"
				+"'"+POut.String(eServiceShortGuid.ShortGuid)+"',"
				+"'"+POut.String(eServiceShortGuid.ShortURL)+"',"
				+    POut.Long  (eServiceShortGuid.FKey)+","
				+"'"+POut.String(eServiceShortGuid.FKeyType.ToString())+"',"
				+    POut.DateT (eServiceShortGuid.DateTimeExpiration)+","
				+    DbHelper.Now()+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				eServiceShortGuid.EServiceShortGuidNum=Db.NonQ(command,true,"EServiceShortGuidNum","eServiceShortGuid");
			}
			return eServiceShortGuid.EServiceShortGuidNum;
		}

		///<summary>Inserts many EServiceShortGuids into the database.</summary>
		public static void InsertMany(List<EServiceShortGuid> listEServiceShortGuids) {
			InsertMany(listEServiceShortGuids,false);
		}

		///<summary>Inserts many EServiceShortGuids into the database.  Provides option to use the existing priKey.</summary>
		public static void InsertMany(List<EServiceShortGuid> listEServiceShortGuids,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				foreach(EServiceShortGuid eServiceShortGuid in listEServiceShortGuids) {
					Insert(eServiceShortGuid);
				}
			}
			else {
				StringBuilder sbCommands=null;
				int index=0;
				int countRows=0;
				while(index < listEServiceShortGuids.Count) {
					EServiceShortGuid eServiceShortGuid=listEServiceShortGuids[index];
					StringBuilder sbRow=new StringBuilder("(");
					bool hasComma=false;
					if(sbCommands==null) {
						sbCommands=new StringBuilder();
						sbCommands.Append("INSERT INTO eserviceshortguid (");
						if(useExistingPK) {
							sbCommands.Append("EServiceShortGuidNum,");
						}
						sbCommands.Append("EServiceCode,ShortGuid,ShortURL,FKey,FKeyType,DateTimeExpiration,DateTEntry) VALUES ");
						countRows=0;
					}
					else {
						hasComma=true;
					}
					if(useExistingPK) {
						sbRow.Append(POut.Long(eServiceShortGuid.EServiceShortGuidNum)); sbRow.Append(",");
					}
					sbRow.Append("'"+POut.String(eServiceShortGuid.EServiceCode.ToString())+"'"); sbRow.Append(",");
					sbRow.Append("'"+POut.String(eServiceShortGuid.ShortGuid)+"'"); sbRow.Append(",");
					sbRow.Append("'"+POut.String(eServiceShortGuid.ShortURL)+"'"); sbRow.Append(",");
					sbRow.Append(POut.Long(eServiceShortGuid.FKey)); sbRow.Append(",");
					sbRow.Append("'"+POut.String(eServiceShortGuid.FKeyType.ToString())+"'"); sbRow.Append(",");
					sbRow.Append(POut.DateT(eServiceShortGuid.DateTimeExpiration)); sbRow.Append(",");
					sbRow.Append(DbHelper.Now()); sbRow.Append(")");
					if(sbCommands.Length+sbRow.Length+1 > TableBase.MaxAllowedPacketCount && countRows > 0) {
						Db.NonQ(sbCommands.ToString());
						sbCommands=null;
					}
					else {
						if(hasComma) {
							sbCommands.Append(",");
						}
						sbCommands.Append(sbRow.ToString());
						countRows++;
						if(index==listEServiceShortGuids.Count-1) {
							Db.NonQ(sbCommands.ToString());
						}
						index++;
					}
				}
			}
		}

		///<summary>Inserts one EServiceShortGuid into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EServiceShortGuid eServiceShortGuid) {
			return InsertNoCache(eServiceShortGuid,false);
		}

		///<summary>Inserts one EServiceShortGuid into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EServiceShortGuid eServiceShortGuid,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO eserviceshortguid (";
			if(!useExistingPK && isRandomKeys) {
				eServiceShortGuid.EServiceShortGuidNum=ReplicationServers.GetKeyNoCache("eserviceshortguid","EServiceShortGuidNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="EServiceShortGuidNum,";
			}
			command+="EServiceCode,ShortGuid,ShortURL,FKey,FKeyType,DateTimeExpiration,DateTEntry) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(eServiceShortGuid.EServiceShortGuidNum)+",";
			}
			command+=
				 "'"+POut.String(eServiceShortGuid.EServiceCode.ToString())+"',"
				+"'"+POut.String(eServiceShortGuid.ShortGuid)+"',"
				+"'"+POut.String(eServiceShortGuid.ShortURL)+"',"
				+    POut.Long  (eServiceShortGuid.FKey)+","
				+"'"+POut.String(eServiceShortGuid.FKeyType.ToString())+"',"
				+    POut.DateT (eServiceShortGuid.DateTimeExpiration)+","
				+    DbHelper.Now()+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				eServiceShortGuid.EServiceShortGuidNum=Db.NonQ(command,true,"EServiceShortGuidNum","eServiceShortGuid");
			}
			return eServiceShortGuid.EServiceShortGuidNum;
		}

		///<summary>Updates one EServiceShortGuid in the database.</summary>
		public static void Update(EServiceShortGuid eServiceShortGuid) {
			string command="UPDATE eserviceshortguid SET "
				+"EServiceCode        = '"+POut.String(eServiceShortGuid.EServiceCode.ToString())+"', "
				+"ShortGuid           = '"+POut.String(eServiceShortGuid.ShortGuid)+"', "
				+"ShortURL            = '"+POut.String(eServiceShortGuid.ShortURL)+"', "
				+"FKey                =  "+POut.Long  (eServiceShortGuid.FKey)+", "
				+"FKeyType            = '"+POut.String(eServiceShortGuid.FKeyType.ToString())+"', "
				+"DateTimeExpiration  =  "+POut.DateT (eServiceShortGuid.DateTimeExpiration)+" "
				//DateTEntry not allowed to change
				+"WHERE EServiceShortGuidNum = "+POut.Long(eServiceShortGuid.EServiceShortGuidNum);
			Db.NonQ(command);
		}

		///<summary>Updates one EServiceShortGuid in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(EServiceShortGuid eServiceShortGuid,EServiceShortGuid oldEServiceShortGuid) {
			string command="";
			if(eServiceShortGuid.EServiceCode != oldEServiceShortGuid.EServiceCode) {
				if(command!="") { command+=",";}
				command+="EServiceCode = '"+POut.String(eServiceShortGuid.EServiceCode.ToString())+"'";
			}
			if(eServiceShortGuid.ShortGuid != oldEServiceShortGuid.ShortGuid) {
				if(command!="") { command+=",";}
				command+="ShortGuid = '"+POut.String(eServiceShortGuid.ShortGuid)+"'";
			}
			if(eServiceShortGuid.ShortURL != oldEServiceShortGuid.ShortURL) {
				if(command!="") { command+=",";}
				command+="ShortURL = '"+POut.String(eServiceShortGuid.ShortURL)+"'";
			}
			if(eServiceShortGuid.FKey != oldEServiceShortGuid.FKey) {
				if(command!="") { command+=",";}
				command+="FKey = "+POut.Long(eServiceShortGuid.FKey)+"";
			}
			if(eServiceShortGuid.FKeyType != oldEServiceShortGuid.FKeyType) {
				if(command!="") { command+=",";}
				command+="FKeyType = '"+POut.String(eServiceShortGuid.FKeyType.ToString())+"'";
			}
			if(eServiceShortGuid.DateTimeExpiration != oldEServiceShortGuid.DateTimeExpiration) {
				if(command!="") { command+=",";}
				command+="DateTimeExpiration = "+POut.DateT(eServiceShortGuid.DateTimeExpiration)+"";
			}
			//DateTEntry not allowed to change
			if(command=="") {
				return false;
			}
			command="UPDATE eserviceshortguid SET "+command
				+" WHERE EServiceShortGuidNum = "+POut.Long(eServiceShortGuid.EServiceShortGuidNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(EServiceShortGuid,EServiceShortGuid) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(EServiceShortGuid eServiceShortGuid,EServiceShortGuid oldEServiceShortGuid) {
			if(eServiceShortGuid.EServiceCode != oldEServiceShortGuid.EServiceCode) {
				return true;
			}
			if(eServiceShortGuid.ShortGuid != oldEServiceShortGuid.ShortGuid) {
				return true;
			}
			if(eServiceShortGuid.ShortURL != oldEServiceShortGuid.ShortURL) {
				return true;
			}
			if(eServiceShortGuid.FKey != oldEServiceShortGuid.FKey) {
				return true;
			}
			if(eServiceShortGuid.FKeyType != oldEServiceShortGuid.FKeyType) {
				return true;
			}
			if(eServiceShortGuid.DateTimeExpiration != oldEServiceShortGuid.DateTimeExpiration) {
				return true;
			}
			//DateTEntry not allowed to change
			return false;
		}

		///<summary>Deletes one EServiceShortGuid from the database.</summary>
		public static void Delete(long eServiceShortGuidNum) {
			string command="DELETE FROM eserviceshortguid "
				+"WHERE EServiceShortGuidNum = "+POut.Long(eServiceShortGuidNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many EServiceShortGuids from the database.</summary>
		public static void DeleteMany(List<long> listEServiceShortGuidNums) {
			if(listEServiceShortGuidNums==null || listEServiceShortGuidNums.Count==0) {
				return;
			}
			string command="DELETE FROM eserviceshortguid "
				+"WHERE EServiceShortGuidNum IN("+string.Join(",",listEServiceShortGuidNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}