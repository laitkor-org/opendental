//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class InsBlueBookLogCrud {
		///<summary>Gets one InsBlueBookLog object from the database using the primary key.  Returns null if not found.</summary>
		public static InsBlueBookLog SelectOne(long insBlueBookLogNum) {
			string command="SELECT * FROM insbluebooklog "
				+"WHERE InsBlueBookLogNum = "+POut.Long(insBlueBookLogNum);
			List<InsBlueBookLog> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one InsBlueBookLog object from the database using a query.</summary>
		public static InsBlueBookLog SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<InsBlueBookLog> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of InsBlueBookLog objects from the database using a query.</summary>
		public static List<InsBlueBookLog> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<InsBlueBookLog> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<InsBlueBookLog> TableToList(DataTable table) {
			List<InsBlueBookLog> retVal=new List<InsBlueBookLog>();
			InsBlueBookLog insBlueBookLog;
			foreach(DataRow row in table.Rows) {
				insBlueBookLog=new InsBlueBookLog();
				insBlueBookLog.InsBlueBookLogNum= PIn.Long  (row["InsBlueBookLogNum"].ToString());
				insBlueBookLog.ClaimProcNum     = PIn.Long  (row["ClaimProcNum"].ToString());
				insBlueBookLog.AllowedFee       = PIn.Double(row["AllowedFee"].ToString());
				insBlueBookLog.DateTEntry       = PIn.DateT (row["DateTEntry"].ToString());
				insBlueBookLog.Description      = PIn.String(row["Description"].ToString());
				retVal.Add(insBlueBookLog);
			}
			return retVal;
		}

		///<summary>Converts a list of InsBlueBookLog into a DataTable.</summary>
		public static DataTable ListToTable(List<InsBlueBookLog> listInsBlueBookLogs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="InsBlueBookLog";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("InsBlueBookLogNum");
			table.Columns.Add("ClaimProcNum");
			table.Columns.Add("AllowedFee");
			table.Columns.Add("DateTEntry");
			table.Columns.Add("Description");
			foreach(InsBlueBookLog insBlueBookLog in listInsBlueBookLogs) {
				table.Rows.Add(new object[] {
					POut.Long  (insBlueBookLog.InsBlueBookLogNum),
					POut.Long  (insBlueBookLog.ClaimProcNum),
					POut.Double(insBlueBookLog.AllowedFee),
					POut.DateT (insBlueBookLog.DateTEntry,false),
					            insBlueBookLog.Description,
				});
			}
			return table;
		}

		///<summary>Inserts one InsBlueBookLog into the database.  Returns the new priKey.</summary>
		public static long Insert(InsBlueBookLog insBlueBookLog) {
			return Insert(insBlueBookLog,false);
		}

		///<summary>Inserts one InsBlueBookLog into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(InsBlueBookLog insBlueBookLog,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				insBlueBookLog.InsBlueBookLogNum=ReplicationServers.GetKey("insbluebooklog","InsBlueBookLogNum");
			}
			string command="INSERT INTO insbluebooklog (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="InsBlueBookLogNum,";
			}
			command+="ClaimProcNum,AllowedFee,DateTEntry,Description) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(insBlueBookLog.InsBlueBookLogNum)+",";
			}
			command+=
				     POut.Long  (insBlueBookLog.ClaimProcNum)+","
				+		 POut.Double(insBlueBookLog.AllowedFee)+","
				+    DbHelper.Now()+","
				+    DbHelper.ParamChar+"paramDescription)";
			if(insBlueBookLog.Description==null) {
				insBlueBookLog.Description="";
			}
			OdSqlParameter paramDescription=new OdSqlParameter("paramDescription",OdDbType.Text,POut.StringParam(insBlueBookLog.Description));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramDescription);
			}
			else {
				insBlueBookLog.InsBlueBookLogNum=Db.NonQ(command,true,"InsBlueBookLogNum","insBlueBookLog",paramDescription);
			}
			return insBlueBookLog.InsBlueBookLogNum;
		}

		///<summary>Inserts one InsBlueBookLog into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(InsBlueBookLog insBlueBookLog) {
			return InsertNoCache(insBlueBookLog,false);
		}

		///<summary>Inserts one InsBlueBookLog into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(InsBlueBookLog insBlueBookLog,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO insbluebooklog (";
			if(!useExistingPK && isRandomKeys) {
				insBlueBookLog.InsBlueBookLogNum=ReplicationServers.GetKeyNoCache("insbluebooklog","InsBlueBookLogNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="InsBlueBookLogNum,";
			}
			command+="ClaimProcNum,AllowedFee,DateTEntry,Description) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(insBlueBookLog.InsBlueBookLogNum)+",";
			}
			command+=
				     POut.Long  (insBlueBookLog.ClaimProcNum)+","
				+	   POut.Double(insBlueBookLog.AllowedFee)+","
				+    DbHelper.Now()+","
				+    DbHelper.ParamChar+"paramDescription)";
			if(insBlueBookLog.Description==null) {
				insBlueBookLog.Description="";
			}
			OdSqlParameter paramDescription=new OdSqlParameter("paramDescription",OdDbType.Text,POut.StringParam(insBlueBookLog.Description));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramDescription);
			}
			else {
				insBlueBookLog.InsBlueBookLogNum=Db.NonQ(command,true,"InsBlueBookLogNum","insBlueBookLog",paramDescription);
			}
			return insBlueBookLog.InsBlueBookLogNum;
		}

		///<summary>Updates one InsBlueBookLog in the database.</summary>
		public static void Update(InsBlueBookLog insBlueBookLog) {
			string command="UPDATE insbluebooklog SET "
				+"ClaimProcNum     =  "+POut.Long  (insBlueBookLog.ClaimProcNum)+", "
				+"AllowedFee       =  "+POut.Double(insBlueBookLog.AllowedFee)+", "
				//DateTEntry not allowed to change
				+"Description      =  "+DbHelper.ParamChar+"paramDescription "
				+"WHERE InsBlueBookLogNum = "+POut.Long(insBlueBookLog.InsBlueBookLogNum);
			if(insBlueBookLog.Description==null) {
				insBlueBookLog.Description="";
			}
			OdSqlParameter paramDescription=new OdSqlParameter("paramDescription",OdDbType.Text,POut.StringParam(insBlueBookLog.Description));
			Db.NonQ(command,paramDescription);
		}

		///<summary>Updates one InsBlueBookLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(InsBlueBookLog insBlueBookLog,InsBlueBookLog oldInsBlueBookLog) {
			string command="";
			if(insBlueBookLog.ClaimProcNum != oldInsBlueBookLog.ClaimProcNum) {
				if(command!="") { command+=",";}
				command+="ClaimProcNum = "+POut.Long(insBlueBookLog.ClaimProcNum)+"";
			}
			if(insBlueBookLog.AllowedFee != oldInsBlueBookLog.AllowedFee) {
				if(command!="") { command+=",";}
				command+="AllowedFee = "+POut.Double(insBlueBookLog.AllowedFee)+"";
			}
			//DateTEntry not allowed to change
			if(insBlueBookLog.Description != oldInsBlueBookLog.Description) {
				if(command!="") { command+=",";}
				command+="Description = "+DbHelper.ParamChar+"paramDescription";
			}
			if(command=="") {
				return false;
			}
			if(insBlueBookLog.Description==null) {
				insBlueBookLog.Description="";
			}
			OdSqlParameter paramDescription=new OdSqlParameter("paramDescription",OdDbType.Text,POut.StringParam(insBlueBookLog.Description));
			command="UPDATE insbluebooklog SET "+command
				+" WHERE InsBlueBookLogNum = "+POut.Long(insBlueBookLog.InsBlueBookLogNum);
			Db.NonQ(command,paramDescription);
			return true;
		}

		///<summary>Returns true if Update(InsBlueBookLog,InsBlueBookLog) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(InsBlueBookLog insBlueBookLog,InsBlueBookLog oldInsBlueBookLog) {
			if(insBlueBookLog.ClaimProcNum != oldInsBlueBookLog.ClaimProcNum) {
				return true;
			}
			if(insBlueBookLog.AllowedFee != oldInsBlueBookLog.AllowedFee) {
				return true;
			}
			//DateTEntry not allowed to change
			if(insBlueBookLog.Description != oldInsBlueBookLog.Description) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one InsBlueBookLog from the database.</summary>
		public static void Delete(long insBlueBookLogNum) {
			string command="DELETE FROM insbluebooklog "
				+"WHERE InsBlueBookLogNum = "+POut.Long(insBlueBookLogNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many InsBlueBookLogs from the database.</summary>
		public static void DeleteMany(List<long> listInsBlueBookLogNums) {
			if(listInsBlueBookLogNums==null || listInsBlueBookLogNums.Count==0) {
				return;
			}
			string command="DELETE FROM insbluebooklog "
				+"WHERE InsBlueBookLogNum IN("+string.Join(",",listInsBlueBookLogNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}