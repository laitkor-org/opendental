//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class MountItemDefCrud {
		///<summary>Gets one MountItemDef object from the database using the primary key.  Returns null if not found.</summary>
		public static MountItemDef SelectOne(long mountItemDefNum) {
			string command="SELECT * FROM mountitemdef "
				+"WHERE MountItemDefNum = "+POut.Long(mountItemDefNum);
			List<MountItemDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MountItemDef object from the database using a query.</summary>
		public static MountItemDef SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MountItemDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of MountItemDef objects from the database using a query.</summary>
		public static List<MountItemDef> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MountItemDef> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<MountItemDef> TableToList(DataTable table) {
			List<MountItemDef> retVal=new List<MountItemDef>();
			MountItemDef mountItemDef;
			foreach(DataRow row in table.Rows) {
				mountItemDef=new MountItemDef();
				mountItemDef.MountItemDefNum= PIn.Long  (row["MountItemDefNum"].ToString());
				mountItemDef.MountDefNum    = PIn.Long  (row["MountDefNum"].ToString());
				mountItemDef.Xpos           = PIn.Int   (row["Xpos"].ToString());
				mountItemDef.Ypos           = PIn.Int   (row["Ypos"].ToString());
				mountItemDef.Width          = PIn.Int   (row["Width"].ToString());
				mountItemDef.Height         = PIn.Int   (row["Height"].ToString());
				mountItemDef.ItemOrder      = PIn.Int   (row["ItemOrder"].ToString());
				mountItemDef.RotateOnAcquire= PIn.Int   (row["RotateOnAcquire"].ToString());
				mountItemDef.ToothNumbers   = PIn.String(row["ToothNumbers"].ToString());
				mountItemDef.TextShowing    = PIn.String(row["TextShowing"].ToString());
				mountItemDef.FontSize       = PIn.Float (row["FontSize"].ToString());
				retVal.Add(mountItemDef);
			}
			return retVal;
		}

		///<summary>Converts a list of MountItemDef into a DataTable.</summary>
		public static DataTable ListToTable(List<MountItemDef> listMountItemDefs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="MountItemDef";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("MountItemDefNum");
			table.Columns.Add("MountDefNum");
			table.Columns.Add("Xpos");
			table.Columns.Add("Ypos");
			table.Columns.Add("Width");
			table.Columns.Add("Height");
			table.Columns.Add("ItemOrder");
			table.Columns.Add("RotateOnAcquire");
			table.Columns.Add("ToothNumbers");
			table.Columns.Add("TextShowing");
			table.Columns.Add("FontSize");
			foreach(MountItemDef mountItemDef in listMountItemDefs) {
				table.Rows.Add(new object[] {
					POut.Long  (mountItemDef.MountItemDefNum),
					POut.Long  (mountItemDef.MountDefNum),
					POut.Int   (mountItemDef.Xpos),
					POut.Int   (mountItemDef.Ypos),
					POut.Int   (mountItemDef.Width),
					POut.Int   (mountItemDef.Height),
					POut.Int   (mountItemDef.ItemOrder),
					POut.Int   (mountItemDef.RotateOnAcquire),
					            mountItemDef.ToothNumbers,
					            mountItemDef.TextShowing,
					POut.Float (mountItemDef.FontSize),
				});
			}
			return table;
		}

		///<summary>Inserts one MountItemDef into the database.  Returns the new priKey.</summary>
		public static long Insert(MountItemDef mountItemDef) {
			return Insert(mountItemDef,false);
		}

		///<summary>Inserts one MountItemDef into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(MountItemDef mountItemDef,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				mountItemDef.MountItemDefNum=ReplicationServers.GetKey("mountitemdef","MountItemDefNum");
			}
			string command="INSERT INTO mountitemdef (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="MountItemDefNum,";
			}
			command+="MountDefNum,Xpos,Ypos,Width,Height,ItemOrder,RotateOnAcquire,ToothNumbers,TextShowing,FontSize) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(mountItemDef.MountItemDefNum)+",";
			}
			command+=
				     POut.Long  (mountItemDef.MountDefNum)+","
				+    POut.Int   (mountItemDef.Xpos)+","
				+    POut.Int   (mountItemDef.Ypos)+","
				+    POut.Int   (mountItemDef.Width)+","
				+    POut.Int   (mountItemDef.Height)+","
				+    POut.Int   (mountItemDef.ItemOrder)+","
				+    POut.Int   (mountItemDef.RotateOnAcquire)+","
				+"'"+POut.String(mountItemDef.ToothNumbers)+"',"
				+    DbHelper.ParamChar+"paramTextShowing,"
				+    POut.Float (mountItemDef.FontSize)+")";
			if(mountItemDef.TextShowing==null) {
				mountItemDef.TextShowing="";
			}
			OdSqlParameter paramTextShowing=new OdSqlParameter("paramTextShowing",OdDbType.Text,POut.StringParam(mountItemDef.TextShowing));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramTextShowing);
			}
			else {
				mountItemDef.MountItemDefNum=Db.NonQ(command,true,"MountItemDefNum","mountItemDef",paramTextShowing);
			}
			return mountItemDef.MountItemDefNum;
		}

		///<summary>Inserts one MountItemDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(MountItemDef mountItemDef) {
			return InsertNoCache(mountItemDef,false);
		}

		///<summary>Inserts one MountItemDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(MountItemDef mountItemDef,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO mountitemdef (";
			if(!useExistingPK && isRandomKeys) {
				mountItemDef.MountItemDefNum=ReplicationServers.GetKeyNoCache("mountitemdef","MountItemDefNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="MountItemDefNum,";
			}
			command+="MountDefNum,Xpos,Ypos,Width,Height,ItemOrder,RotateOnAcquire,ToothNumbers,TextShowing,FontSize) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(mountItemDef.MountItemDefNum)+",";
			}
			command+=
				     POut.Long  (mountItemDef.MountDefNum)+","
				+    POut.Int   (mountItemDef.Xpos)+","
				+    POut.Int   (mountItemDef.Ypos)+","
				+    POut.Int   (mountItemDef.Width)+","
				+    POut.Int   (mountItemDef.Height)+","
				+    POut.Int   (mountItemDef.ItemOrder)+","
				+    POut.Int   (mountItemDef.RotateOnAcquire)+","
				+"'"+POut.String(mountItemDef.ToothNumbers)+"',"
				+    DbHelper.ParamChar+"paramTextShowing,"
				+    POut.Float (mountItemDef.FontSize)+")";
			if(mountItemDef.TextShowing==null) {
				mountItemDef.TextShowing="";
			}
			OdSqlParameter paramTextShowing=new OdSqlParameter("paramTextShowing",OdDbType.Text,POut.StringParam(mountItemDef.TextShowing));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramTextShowing);
			}
			else {
				mountItemDef.MountItemDefNum=Db.NonQ(command,true,"MountItemDefNum","mountItemDef",paramTextShowing);
			}
			return mountItemDef.MountItemDefNum;
		}

		///<summary>Updates one MountItemDef in the database.</summary>
		public static void Update(MountItemDef mountItemDef) {
			string command="UPDATE mountitemdef SET "
				+"MountDefNum    =  "+POut.Long  (mountItemDef.MountDefNum)+", "
				+"Xpos           =  "+POut.Int   (mountItemDef.Xpos)+", "
				+"Ypos           =  "+POut.Int   (mountItemDef.Ypos)+", "
				+"Width          =  "+POut.Int   (mountItemDef.Width)+", "
				+"Height         =  "+POut.Int   (mountItemDef.Height)+", "
				+"ItemOrder      =  "+POut.Int   (mountItemDef.ItemOrder)+", "
				+"RotateOnAcquire=  "+POut.Int   (mountItemDef.RotateOnAcquire)+", "
				+"ToothNumbers   = '"+POut.String(mountItemDef.ToothNumbers)+"', "
				+"TextShowing    =  "+DbHelper.ParamChar+"paramTextShowing, "
				+"FontSize       =  "+POut.Float (mountItemDef.FontSize)+" "
				+"WHERE MountItemDefNum = "+POut.Long(mountItemDef.MountItemDefNum);
			if(mountItemDef.TextShowing==null) {
				mountItemDef.TextShowing="";
			}
			OdSqlParameter paramTextShowing=new OdSqlParameter("paramTextShowing",OdDbType.Text,POut.StringParam(mountItemDef.TextShowing));
			Db.NonQ(command,paramTextShowing);
		}

		///<summary>Updates one MountItemDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(MountItemDef mountItemDef,MountItemDef oldMountItemDef) {
			string command="";
			if(mountItemDef.MountDefNum != oldMountItemDef.MountDefNum) {
				if(command!="") { command+=",";}
				command+="MountDefNum = "+POut.Long(mountItemDef.MountDefNum)+"";
			}
			if(mountItemDef.Xpos != oldMountItemDef.Xpos) {
				if(command!="") { command+=",";}
				command+="Xpos = "+POut.Int(mountItemDef.Xpos)+"";
			}
			if(mountItemDef.Ypos != oldMountItemDef.Ypos) {
				if(command!="") { command+=",";}
				command+="Ypos = "+POut.Int(mountItemDef.Ypos)+"";
			}
			if(mountItemDef.Width != oldMountItemDef.Width) {
				if(command!="") { command+=",";}
				command+="Width = "+POut.Int(mountItemDef.Width)+"";
			}
			if(mountItemDef.Height != oldMountItemDef.Height) {
				if(command!="") { command+=",";}
				command+="Height = "+POut.Int(mountItemDef.Height)+"";
			}
			if(mountItemDef.ItemOrder != oldMountItemDef.ItemOrder) {
				if(command!="") { command+=",";}
				command+="ItemOrder = "+POut.Int(mountItemDef.ItemOrder)+"";
			}
			if(mountItemDef.RotateOnAcquire != oldMountItemDef.RotateOnAcquire) {
				if(command!="") { command+=",";}
				command+="RotateOnAcquire = "+POut.Int(mountItemDef.RotateOnAcquire)+"";
			}
			if(mountItemDef.ToothNumbers != oldMountItemDef.ToothNumbers) {
				if(command!="") { command+=",";}
				command+="ToothNumbers = '"+POut.String(mountItemDef.ToothNumbers)+"'";
			}
			if(mountItemDef.TextShowing != oldMountItemDef.TextShowing) {
				if(command!="") { command+=",";}
				command+="TextShowing = "+DbHelper.ParamChar+"paramTextShowing";
			}
			if(mountItemDef.FontSize != oldMountItemDef.FontSize) {
				if(command!="") { command+=",";}
				command+="FontSize = "+POut.Float(mountItemDef.FontSize)+"";
			}
			if(command=="") {
				return false;
			}
			if(mountItemDef.TextShowing==null) {
				mountItemDef.TextShowing="";
			}
			OdSqlParameter paramTextShowing=new OdSqlParameter("paramTextShowing",OdDbType.Text,POut.StringParam(mountItemDef.TextShowing));
			command="UPDATE mountitemdef SET "+command
				+" WHERE MountItemDefNum = "+POut.Long(mountItemDef.MountItemDefNum);
			Db.NonQ(command,paramTextShowing);
			return true;
		}

		///<summary>Returns true if Update(MountItemDef,MountItemDef) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(MountItemDef mountItemDef,MountItemDef oldMountItemDef) {
			if(mountItemDef.MountDefNum != oldMountItemDef.MountDefNum) {
				return true;
			}
			if(mountItemDef.Xpos != oldMountItemDef.Xpos) {
				return true;
			}
			if(mountItemDef.Ypos != oldMountItemDef.Ypos) {
				return true;
			}
			if(mountItemDef.Width != oldMountItemDef.Width) {
				return true;
			}
			if(mountItemDef.Height != oldMountItemDef.Height) {
				return true;
			}
			if(mountItemDef.ItemOrder != oldMountItemDef.ItemOrder) {
				return true;
			}
			if(mountItemDef.RotateOnAcquire != oldMountItemDef.RotateOnAcquire) {
				return true;
			}
			if(mountItemDef.ToothNumbers != oldMountItemDef.ToothNumbers) {
				return true;
			}
			if(mountItemDef.TextShowing != oldMountItemDef.TextShowing) {
				return true;
			}
			if(mountItemDef.FontSize != oldMountItemDef.FontSize) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one MountItemDef from the database.</summary>
		public static void Delete(long mountItemDefNum) {
			string command="DELETE FROM mountitemdef "
				+"WHERE MountItemDefNum = "+POut.Long(mountItemDefNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many MountItemDefs from the database.</summary>
		public static void DeleteMany(List<long> listMountItemDefNums) {
			if(listMountItemDefNums==null || listMountItemDefNums.Count==0) {
				return;
			}
			string command="DELETE FROM mountitemdef "
				+"WHERE MountItemDefNum IN("+string.Join(",",listMountItemDefNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}