//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;

namespace OpenDentBusiness.Crud{
	public class EmailSecureCrud {
		///<summary>Gets one EmailSecure object from the database using the primary key.  Returns null if not found.</summary>
		public static EmailSecure SelectOne(long emailSecureNum) {
			string command="SELECT * FROM emailsecure "
				+"WHERE EmailSecureNum = "+POut.Long(emailSecureNum);
			List<EmailSecure> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EmailSecure object from the database using a query.</summary>
		public static EmailSecure SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EmailSecure> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EmailSecure objects from the database using a query.</summary>
		public static List<EmailSecure> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EmailSecure> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<EmailSecure> TableToList(DataTable table) {
			List<EmailSecure> retVal=new List<EmailSecure>();
			EmailSecure emailSecure;
			foreach(DataRow row in table.Rows) {
				emailSecure=new EmailSecure();
				emailSecure.EmailSecureNum = PIn.Long  (row["EmailSecureNum"].ToString());
				emailSecure.ClinicNum      = PIn.Long  (row["ClinicNum"].ToString());
				emailSecure.PatNum         = PIn.Long  (row["PatNum"].ToString());
				emailSecure.EmailMessageNum= PIn.Long  (row["EmailMessageNum"].ToString());
				emailSecure.EmailChainFK   = PIn.Long  (row["EmailChainFK"].ToString());
				emailSecure.EmailFK        = PIn.Long  (row["EmailFK"].ToString());
				emailSecure.DateTEntry     = PIn.DateT (row["DateTEntry"].ToString());
				emailSecure.SecDateTEdit   = PIn.DateT (row["SecDateTEdit"].ToString());
				retVal.Add(emailSecure);
			}
			return retVal;
		}

		///<summary>Converts a list of EmailSecure into a DataTable.</summary>
		public static DataTable ListToTable(List<EmailSecure> listEmailSecures,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="EmailSecure";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("EmailSecureNum");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("PatNum");
			table.Columns.Add("EmailMessageNum");
			table.Columns.Add("EmailChainFK");
			table.Columns.Add("EmailFK");
			table.Columns.Add("DateTEntry");
			table.Columns.Add("SecDateTEdit");
			foreach(EmailSecure emailSecure in listEmailSecures) {
				table.Rows.Add(new object[] {
					POut.Long  (emailSecure.EmailSecureNum),
					POut.Long  (emailSecure.ClinicNum),
					POut.Long  (emailSecure.PatNum),
					POut.Long  (emailSecure.EmailMessageNum),
					POut.Long  (emailSecure.EmailChainFK),
					POut.Long  (emailSecure.EmailFK),
					POut.DateT (emailSecure.DateTEntry,false),
					POut.DateT (emailSecure.SecDateTEdit,false),
				});
			}
			return table;
		}

		///<summary>Inserts one EmailSecure into the database.  Returns the new priKey.</summary>
		public static long Insert(EmailSecure emailSecure) {
			return Insert(emailSecure,false);
		}

		///<summary>Inserts one EmailSecure into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(EmailSecure emailSecure,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				emailSecure.EmailSecureNum=ReplicationServers.GetKey("emailsecure","EmailSecureNum");
			}
			string command="INSERT INTO emailsecure (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EmailSecureNum,";
			}
			command+="ClinicNum,PatNum,EmailMessageNum,EmailChainFK,EmailFK,DateTEntry) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(emailSecure.EmailSecureNum)+",";
			}
			command+=
				     POut.Long  (emailSecure.ClinicNum)+","
				+    POut.Long  (emailSecure.PatNum)+","
				+    POut.Long  (emailSecure.EmailMessageNum)+","
				+    POut.Long  (emailSecure.EmailChainFK)+","
				+    POut.Long  (emailSecure.EmailFK)+","
				+    DbHelper.Now()+")";
				//SecDateTEdit can only be set by MySQL
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				emailSecure.EmailSecureNum=Db.NonQ(command,true,"EmailSecureNum","emailSecure");
			}
			return emailSecure.EmailSecureNum;
		}

		///<summary>Inserts many EmailSecures into the database.</summary>
		public static void InsertMany(List<EmailSecure> listEmailSecures) {
			InsertMany(listEmailSecures,false);
		}

		///<summary>Inserts many EmailSecures into the database.  Provides option to use the existing priKey.</summary>
		public static void InsertMany(List<EmailSecure> listEmailSecures,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				foreach(EmailSecure emailSecure in listEmailSecures) {
					Insert(emailSecure);
				}
			}
			else {
				StringBuilder sbCommands=null;
				int index=0;
				int countRows=0;
				while(index < listEmailSecures.Count) {
					EmailSecure emailSecure=listEmailSecures[index];
					StringBuilder sbRow=new StringBuilder("(");
					bool hasComma=false;
					if(sbCommands==null) {
						sbCommands=new StringBuilder();
						sbCommands.Append("INSERT INTO emailsecure (");
						if(useExistingPK) {
							sbCommands.Append("EmailSecureNum,");
						}
						sbCommands.Append("ClinicNum,PatNum,EmailMessageNum,EmailChainFK,EmailFK,DateTEntry) VALUES ");
						countRows=0;
					}
					else {
						hasComma=true;
					}
					if(useExistingPK) {
						sbRow.Append(POut.Long(emailSecure.EmailSecureNum)); sbRow.Append(",");
					}
					sbRow.Append(POut.Long(emailSecure.ClinicNum)); sbRow.Append(",");
					sbRow.Append(POut.Long(emailSecure.PatNum)); sbRow.Append(",");
					sbRow.Append(POut.Long(emailSecure.EmailMessageNum)); sbRow.Append(",");
					sbRow.Append(POut.Long(emailSecure.EmailChainFK)); sbRow.Append(",");
					sbRow.Append(POut.Long(emailSecure.EmailFK)); sbRow.Append(",");
					sbRow.Append(DbHelper.Now()); sbRow.Append(")");
					//SecDateTEdit can only be set by MySQL
					if(sbCommands.Length+sbRow.Length+1 > TableBase.MaxAllowedPacketCount && countRows > 0) {
						Db.NonQ(sbCommands.ToString());
						sbCommands=null;
					}
					else {
						if(hasComma) {
							sbCommands.Append(",");
						}
						sbCommands.Append(sbRow.ToString());
						countRows++;
						if(index==listEmailSecures.Count-1) {
							Db.NonQ(sbCommands.ToString());
						}
						index++;
					}
				}
			}
		}

		///<summary>Inserts one EmailSecure into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EmailSecure emailSecure) {
			return InsertNoCache(emailSecure,false);
		}

		///<summary>Inserts one EmailSecure into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(EmailSecure emailSecure,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO emailsecure (";
			if(!useExistingPK && isRandomKeys) {
				emailSecure.EmailSecureNum=ReplicationServers.GetKeyNoCache("emailsecure","EmailSecureNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="EmailSecureNum,";
			}
			command+="ClinicNum,PatNum,EmailMessageNum,EmailChainFK,EmailFK,DateTEntry) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(emailSecure.EmailSecureNum)+",";
			}
			command+=
				     POut.Long  (emailSecure.ClinicNum)+","
				+    POut.Long  (emailSecure.PatNum)+","
				+    POut.Long  (emailSecure.EmailMessageNum)+","
				+    POut.Long  (emailSecure.EmailChainFK)+","
				+    POut.Long  (emailSecure.EmailFK)+","
				+    DbHelper.Now()+")";
				//SecDateTEdit can only be set by MySQL
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				emailSecure.EmailSecureNum=Db.NonQ(command,true,"EmailSecureNum","emailSecure");
			}
			return emailSecure.EmailSecureNum;
		}

		///<summary>Updates one EmailSecure in the database.</summary>
		public static void Update(EmailSecure emailSecure) {
			string command="UPDATE emailsecure SET "
				+"ClinicNum      =  "+POut.Long  (emailSecure.ClinicNum)+", "
				+"PatNum         =  "+POut.Long  (emailSecure.PatNum)+", "
				+"EmailMessageNum=  "+POut.Long  (emailSecure.EmailMessageNum)+", "
				+"EmailChainFK   =  "+POut.Long  (emailSecure.EmailChainFK)+", "
				+"EmailFK        =  "+POut.Long  (emailSecure.EmailFK)+" "
				//DateTEntry not allowed to change
				//SecDateTEdit can only be set by MySQL
				+"WHERE EmailSecureNum = "+POut.Long(emailSecure.EmailSecureNum);
			Db.NonQ(command);
		}

		///<summary>Updates one EmailSecure in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(EmailSecure emailSecure,EmailSecure oldEmailSecure) {
			string command="";
			if(emailSecure.ClinicNum != oldEmailSecure.ClinicNum) {
				if(command!="") { command+=",";}
				command+="ClinicNum = "+POut.Long(emailSecure.ClinicNum)+"";
			}
			if(emailSecure.PatNum != oldEmailSecure.PatNum) {
				if(command!="") { command+=",";}
				command+="PatNum = "+POut.Long(emailSecure.PatNum)+"";
			}
			if(emailSecure.EmailMessageNum != oldEmailSecure.EmailMessageNum) {
				if(command!="") { command+=",";}
				command+="EmailMessageNum = "+POut.Long(emailSecure.EmailMessageNum)+"";
			}
			if(emailSecure.EmailChainFK != oldEmailSecure.EmailChainFK) {
				if(command!="") { command+=",";}
				command+="EmailChainFK = "+POut.Long(emailSecure.EmailChainFK)+"";
			}
			if(emailSecure.EmailFK != oldEmailSecure.EmailFK) {
				if(command!="") { command+=",";}
				command+="EmailFK = "+POut.Long(emailSecure.EmailFK)+"";
			}
			//DateTEntry not allowed to change
			//SecDateTEdit can only be set by MySQL
			if(command=="") {
				return false;
			}
			command="UPDATE emailsecure SET "+command
				+" WHERE EmailSecureNum = "+POut.Long(emailSecure.EmailSecureNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(EmailSecure,EmailSecure) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(EmailSecure emailSecure,EmailSecure oldEmailSecure) {
			if(emailSecure.ClinicNum != oldEmailSecure.ClinicNum) {
				return true;
			}
			if(emailSecure.PatNum != oldEmailSecure.PatNum) {
				return true;
			}
			if(emailSecure.EmailMessageNum != oldEmailSecure.EmailMessageNum) {
				return true;
			}
			if(emailSecure.EmailChainFK != oldEmailSecure.EmailChainFK) {
				return true;
			}
			if(emailSecure.EmailFK != oldEmailSecure.EmailFK) {
				return true;
			}
			//DateTEntry not allowed to change
			//SecDateTEdit can only be set by MySQL
			return false;
		}

		///<summary>Deletes one EmailSecure from the database.</summary>
		public static void Delete(long emailSecureNum) {
			string command="DELETE FROM emailsecure "
				+"WHERE EmailSecureNum = "+POut.Long(emailSecureNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many EmailSecures from the database.</summary>
		public static void DeleteMany(List<long> listEmailSecureNums) {
			if(listEmailSecureNums==null || listEmailSecureNums.Count==0) {
				return;
			}
			string command="DELETE FROM emailsecure "
				+"WHERE EmailSecureNum IN("+string.Join(",",listEmailSecureNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}