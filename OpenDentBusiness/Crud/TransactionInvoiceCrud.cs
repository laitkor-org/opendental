//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class TransactionInvoiceCrud {
		///<summary>Gets one TransactionInvoice object from the database using the primary key.  Returns null if not found.</summary>
		public static TransactionInvoice SelectOne(long transactionInvoiceNum) {
			string command="SELECT * FROM transactioninvoice "
				+"WHERE TransactionInvoiceNum = "+POut.Long(transactionInvoiceNum);
			List<TransactionInvoice> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one TransactionInvoice object from the database using a query.</summary>
		public static TransactionInvoice SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<TransactionInvoice> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of TransactionInvoice objects from the database using a query.</summary>
		public static List<TransactionInvoice> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<TransactionInvoice> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<TransactionInvoice> TableToList(DataTable table) {
			List<TransactionInvoice> retVal=new List<TransactionInvoice>();
			TransactionInvoice transactionInvoice;
			foreach(DataRow row in table.Rows) {
				transactionInvoice=new TransactionInvoice();
				transactionInvoice.TransactionInvoiceNum= PIn.Long  (row["TransactionInvoiceNum"].ToString());
				transactionInvoice.FileName             = PIn.String(row["FileName"].ToString());
				transactionInvoice.InvoiceData          = PIn.String(row["InvoiceData"].ToString());
				retVal.Add(transactionInvoice);
			}
			return retVal;
		}

		///<summary>Converts a list of TransactionInvoice into a DataTable.</summary>
		public static DataTable ListToTable(List<TransactionInvoice> listTransactionInvoices,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="TransactionInvoice";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("TransactionInvoiceNum");
			table.Columns.Add("FileName");
			table.Columns.Add("InvoiceData");
			foreach(TransactionInvoice transactionInvoice in listTransactionInvoices) {
				table.Rows.Add(new object[] {
					POut.Long  (transactionInvoice.TransactionInvoiceNum),
					            transactionInvoice.FileName,
					            transactionInvoice.InvoiceData,
				});
			}
			return table;
		}

		///<summary>Inserts one TransactionInvoice into the database.  Returns the new priKey.</summary>
		public static long Insert(TransactionInvoice transactionInvoice) {
			return Insert(transactionInvoice,false);
		}

		///<summary>Inserts one TransactionInvoice into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(TransactionInvoice transactionInvoice,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				transactionInvoice.TransactionInvoiceNum=ReplicationServers.GetKey("transactioninvoice","TransactionInvoiceNum");
			}
			string command="INSERT INTO transactioninvoice (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="TransactionInvoiceNum,";
			}
			command+="FileName,InvoiceData) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(transactionInvoice.TransactionInvoiceNum)+",";
			}
			command+=
				 "'"+POut.String(transactionInvoice.FileName)+"',"
				+    DbHelper.ParamChar+"paramInvoiceData)";
			if(transactionInvoice.InvoiceData==null) {
				transactionInvoice.InvoiceData="";
			}
			OdSqlParameter paramInvoiceData=new OdSqlParameter("paramInvoiceData",OdDbType.Text,POut.StringParam(transactionInvoice.InvoiceData));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramInvoiceData);
			}
			else {
				transactionInvoice.TransactionInvoiceNum=Db.NonQ(command,true,"TransactionInvoiceNum","transactionInvoice",paramInvoiceData);
			}
			return transactionInvoice.TransactionInvoiceNum;
		}

		///<summary>Inserts one TransactionInvoice into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(TransactionInvoice transactionInvoice) {
			return InsertNoCache(transactionInvoice,false);
		}

		///<summary>Inserts one TransactionInvoice into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(TransactionInvoice transactionInvoice,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO transactioninvoice (";
			if(!useExistingPK && isRandomKeys) {
				transactionInvoice.TransactionInvoiceNum=ReplicationServers.GetKeyNoCache("transactioninvoice","TransactionInvoiceNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="TransactionInvoiceNum,";
			}
			command+="FileName,InvoiceData) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(transactionInvoice.TransactionInvoiceNum)+",";
			}
			command+=
				 "'"+POut.String(transactionInvoice.FileName)+"',"
				+    DbHelper.ParamChar+"paramInvoiceData)";
			if(transactionInvoice.InvoiceData==null) {
				transactionInvoice.InvoiceData="";
			}
			OdSqlParameter paramInvoiceData=new OdSqlParameter("paramInvoiceData",OdDbType.Text,POut.StringParam(transactionInvoice.InvoiceData));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramInvoiceData);
			}
			else {
				transactionInvoice.TransactionInvoiceNum=Db.NonQ(command,true,"TransactionInvoiceNum","transactionInvoice",paramInvoiceData);
			}
			return transactionInvoice.TransactionInvoiceNum;
		}

		///<summary>Updates one TransactionInvoice in the database.</summary>
		public static void Update(TransactionInvoice transactionInvoice) {
			string command="UPDATE transactioninvoice SET "
				+"FileName             = '"+POut.String(transactionInvoice.FileName)+"', "
				+"InvoiceData          =  "+DbHelper.ParamChar+"paramInvoiceData "
				+"WHERE TransactionInvoiceNum = "+POut.Long(transactionInvoice.TransactionInvoiceNum);
			if(transactionInvoice.InvoiceData==null) {
				transactionInvoice.InvoiceData="";
			}
			OdSqlParameter paramInvoiceData=new OdSqlParameter("paramInvoiceData",OdDbType.Text,POut.StringParam(transactionInvoice.InvoiceData));
			Db.NonQ(command,paramInvoiceData);
		}

		///<summary>Updates one TransactionInvoice in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(TransactionInvoice transactionInvoice,TransactionInvoice oldTransactionInvoice) {
			string command="";
			if(transactionInvoice.FileName != oldTransactionInvoice.FileName) {
				if(command!="") { command+=",";}
				command+="FileName = '"+POut.String(transactionInvoice.FileName)+"'";
			}
			if(transactionInvoice.InvoiceData != oldTransactionInvoice.InvoiceData) {
				if(command!="") { command+=",";}
				command+="InvoiceData = "+DbHelper.ParamChar+"paramInvoiceData";
			}
			if(command=="") {
				return false;
			}
			if(transactionInvoice.InvoiceData==null) {
				transactionInvoice.InvoiceData="";
			}
			OdSqlParameter paramInvoiceData=new OdSqlParameter("paramInvoiceData",OdDbType.Text,POut.StringParam(transactionInvoice.InvoiceData));
			command="UPDATE transactioninvoice SET "+command
				+" WHERE TransactionInvoiceNum = "+POut.Long(transactionInvoice.TransactionInvoiceNum);
			Db.NonQ(command,paramInvoiceData);
			return true;
		}

		///<summary>Returns true if Update(TransactionInvoice,TransactionInvoice) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(TransactionInvoice transactionInvoice,TransactionInvoice oldTransactionInvoice) {
			if(transactionInvoice.FileName != oldTransactionInvoice.FileName) {
				return true;
			}
			if(transactionInvoice.InvoiceData != oldTransactionInvoice.InvoiceData) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one TransactionInvoice from the database.</summary>
		public static void Delete(long transactionInvoiceNum) {
			string command="DELETE FROM transactioninvoice "
				+"WHERE TransactionInvoiceNum = "+POut.Long(transactionInvoiceNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many TransactionInvoices from the database.</summary>
		public static void DeleteMany(List<long> listTransactionInvoiceNums) {
			if(listTransactionInvoiceNums==null || listTransactionInvoiceNums.Count==0) {
				return;
			}
			string command="DELETE FROM transactioninvoice "
				+"WHERE TransactionInvoiceNum IN("+string.Join(",",listTransactionInvoiceNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}