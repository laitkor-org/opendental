//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class OrthoChartRowCrud {
		///<summary>Gets one OrthoChartRow object from the database using the primary key.  Returns null if not found.</summary>
		public static OrthoChartRow SelectOne(long orthoChartRowNum) {
			string command="SELECT * FROM orthochartrow "
				+"WHERE OrthoChartRowNum = "+POut.Long(orthoChartRowNum);
			List<OrthoChartRow> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one OrthoChartRow object from the database using a query.</summary>
		public static OrthoChartRow SelectOne(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<OrthoChartRow> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of OrthoChartRow objects from the database using a query.</summary>
		public static List<OrthoChartRow> SelectMany(string command) {
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<OrthoChartRow> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<OrthoChartRow> TableToList(DataTable table) {
			List<OrthoChartRow> retVal=new List<OrthoChartRow>();
			OrthoChartRow orthoChartRow;
			foreach(DataRow row in table.Rows) {
				orthoChartRow=new OrthoChartRow();
				orthoChartRow.OrthoChartRowNum= PIn.Long  (row["OrthoChartRowNum"].ToString());
				orthoChartRow.PatNum          = PIn.Long  (row["PatNum"].ToString());
				orthoChartRow.DateTimeService = PIn.DateT (row["DateTimeService"].ToString());
				orthoChartRow.UserNum         = PIn.Long  (row["UserNum"].ToString());
				orthoChartRow.ProvNum         = PIn.Long  (row["ProvNum"].ToString());
				orthoChartRow.Signature       = PIn.String(row["Signature"].ToString());
				retVal.Add(orthoChartRow);
			}
			return retVal;
		}

		///<summary>Converts a list of OrthoChartRow into a DataTable.</summary>
		public static DataTable ListToTable(List<OrthoChartRow> listOrthoChartRows,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="OrthoChartRow";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("OrthoChartRowNum");
			table.Columns.Add("PatNum");
			table.Columns.Add("DateTimeService");
			table.Columns.Add("UserNum");
			table.Columns.Add("ProvNum");
			table.Columns.Add("Signature");
			foreach(OrthoChartRow orthoChartRow in listOrthoChartRows) {
				table.Rows.Add(new object[] {
					POut.Long  (orthoChartRow.OrthoChartRowNum),
					POut.Long  (orthoChartRow.PatNum),
					POut.DateT (orthoChartRow.DateTimeService,false),
					POut.Long  (orthoChartRow.UserNum),
					POut.Long  (orthoChartRow.ProvNum),
					            orthoChartRow.Signature,
				});
			}
			return table;
		}

		///<summary>Inserts one OrthoChartRow into the database.  Returns the new priKey.</summary>
		public static long Insert(OrthoChartRow orthoChartRow) {
			return Insert(orthoChartRow,false);
		}

		///<summary>Inserts one OrthoChartRow into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(OrthoChartRow orthoChartRow,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				orthoChartRow.OrthoChartRowNum=ReplicationServers.GetKey("orthochartrow","OrthoChartRowNum");
			}
			string command="INSERT INTO orthochartrow (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="OrthoChartRowNum,";
			}
			command+="PatNum,DateTimeService,UserNum,ProvNum,Signature) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(orthoChartRow.OrthoChartRowNum)+",";
			}
			command+=
				     POut.Long  (orthoChartRow.PatNum)+","
				+    POut.DateT (orthoChartRow.DateTimeService)+","
				+    POut.Long  (orthoChartRow.UserNum)+","
				+    POut.Long  (orthoChartRow.ProvNum)+","
				+    DbHelper.ParamChar+"paramSignature)";
			if(orthoChartRow.Signature==null) {
				orthoChartRow.Signature="";
			}
			OdSqlParameter paramSignature=new OdSqlParameter("paramSignature",OdDbType.Text,POut.StringParam(orthoChartRow.Signature));
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramSignature);
			}
			else {
				orthoChartRow.OrthoChartRowNum=Db.NonQ(command,true,"OrthoChartRowNum","orthoChartRow",paramSignature);
			}
			return orthoChartRow.OrthoChartRowNum;
		}

		///<summary>Inserts one OrthoChartRow into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(OrthoChartRow orthoChartRow) {
			return InsertNoCache(orthoChartRow,false);
		}

		///<summary>Inserts one OrthoChartRow into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(OrthoChartRow orthoChartRow,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO orthochartrow (";
			if(!useExistingPK && isRandomKeys) {
				orthoChartRow.OrthoChartRowNum=ReplicationServers.GetKeyNoCache("orthochartrow","OrthoChartRowNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="OrthoChartRowNum,";
			}
			command+="PatNum,DateTimeService,UserNum,ProvNum,Signature) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(orthoChartRow.OrthoChartRowNum)+",";
			}
			command+=
				     POut.Long  (orthoChartRow.PatNum)+","
				+    POut.DateT (orthoChartRow.DateTimeService)+","
				+    POut.Long  (orthoChartRow.UserNum)+","
				+    POut.Long  (orthoChartRow.ProvNum)+","
				+    DbHelper.ParamChar+"paramSignature)";
			if(orthoChartRow.Signature==null) {
				orthoChartRow.Signature="";
			}
			OdSqlParameter paramSignature=new OdSqlParameter("paramSignature",OdDbType.Text,POut.StringParam(orthoChartRow.Signature));
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramSignature);
			}
			else {
				orthoChartRow.OrthoChartRowNum=Db.NonQ(command,true,"OrthoChartRowNum","orthoChartRow",paramSignature);
			}
			return orthoChartRow.OrthoChartRowNum;
		}

		///<summary>Updates one OrthoChartRow in the database.</summary>
		public static void Update(OrthoChartRow orthoChartRow) {
			string command="UPDATE orthochartrow SET "
				+"PatNum          =  "+POut.Long  (orthoChartRow.PatNum)+", "
				+"DateTimeService =  "+POut.DateT (orthoChartRow.DateTimeService)+", "
				+"UserNum         =  "+POut.Long  (orthoChartRow.UserNum)+", "
				+"ProvNum         =  "+POut.Long  (orthoChartRow.ProvNum)+", "
				+"Signature       =  "+DbHelper.ParamChar+"paramSignature "
				+"WHERE OrthoChartRowNum = "+POut.Long(orthoChartRow.OrthoChartRowNum);
			if(orthoChartRow.Signature==null) {
				orthoChartRow.Signature="";
			}
			OdSqlParameter paramSignature=new OdSqlParameter("paramSignature",OdDbType.Text,POut.StringParam(orthoChartRow.Signature));
			Db.NonQ(command,paramSignature);
		}

		///<summary>Updates one OrthoChartRow in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(OrthoChartRow orthoChartRow,OrthoChartRow oldOrthoChartRow) {
			string command="";
			if(orthoChartRow.PatNum != oldOrthoChartRow.PatNum) {
				if(command!="") { command+=",";}
				command+="PatNum = "+POut.Long(orthoChartRow.PatNum)+"";
			}
			if(orthoChartRow.DateTimeService != oldOrthoChartRow.DateTimeService) {
				if(command!="") { command+=",";}
				command+="DateTimeService = "+POut.DateT(orthoChartRow.DateTimeService)+"";
			}
			if(orthoChartRow.UserNum != oldOrthoChartRow.UserNum) {
				if(command!="") { command+=",";}
				command+="UserNum = "+POut.Long(orthoChartRow.UserNum)+"";
			}
			if(orthoChartRow.ProvNum != oldOrthoChartRow.ProvNum) {
				if(command!="") { command+=",";}
				command+="ProvNum = "+POut.Long(orthoChartRow.ProvNum)+"";
			}
			if(orthoChartRow.Signature != oldOrthoChartRow.Signature) {
				if(command!="") { command+=",";}
				command+="Signature = "+DbHelper.ParamChar+"paramSignature";
			}
			if(command=="") {
				return false;
			}
			if(orthoChartRow.Signature==null) {
				orthoChartRow.Signature="";
			}
			OdSqlParameter paramSignature=new OdSqlParameter("paramSignature",OdDbType.Text,POut.StringParam(orthoChartRow.Signature));
			command="UPDATE orthochartrow SET "+command
				+" WHERE OrthoChartRowNum = "+POut.Long(orthoChartRow.OrthoChartRowNum);
			Db.NonQ(command,paramSignature);
			return true;
		}

		///<summary>Returns true if Update(OrthoChartRow,OrthoChartRow) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(OrthoChartRow orthoChartRow,OrthoChartRow oldOrthoChartRow) {
			if(orthoChartRow.PatNum != oldOrthoChartRow.PatNum) {
				return true;
			}
			if(orthoChartRow.DateTimeService != oldOrthoChartRow.DateTimeService) {
				return true;
			}
			if(orthoChartRow.UserNum != oldOrthoChartRow.UserNum) {
				return true;
			}
			if(orthoChartRow.ProvNum != oldOrthoChartRow.ProvNum) {
				return true;
			}
			if(orthoChartRow.Signature != oldOrthoChartRow.Signature) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one OrthoChartRow from the database.</summary>
		public static void Delete(long orthoChartRowNum) {
			string command="DELETE FROM orthochartrow "
				+"WHERE OrthoChartRowNum = "+POut.Long(orthoChartRowNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many OrthoChartRows from the database.</summary>
		public static void DeleteMany(List<long> listOrthoChartRowNums) {
			if(listOrthoChartRowNums==null || listOrthoChartRowNums.Count==0) {
				return;
			}
			string command="DELETE FROM orthochartrow "
				+"WHERE OrthoChartRowNum IN("+string.Join(",",listOrthoChartRowNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}